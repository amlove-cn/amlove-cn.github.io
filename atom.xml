<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老鼠洞</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://s.amlove.cn/"/>
  <updated>2017-03-13T13:39:59.881Z</updated>
  <id>http://s.amlove.cn/</id>
  
  <author>
    <name>牵猪的仓鼠</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello world on Hexo!</title>
    <link href="http://s.amlove.cn/2017/03/12/hexo/learn/hello-world/"/>
    <id>http://s.amlove.cn/2017/03/12/hexo/learn/hello-world/</id>
    <published>2017-03-12T11:45:02.000Z</published>
    <updated>2017-03-13T13:39:59.881Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      Hello world on hexo!
    
    </summary>
    
      <category term="hexo入门" scheme="http://s.amlove.cn/categories/hexo%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="hexo" scheme="http://s.amlove.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>配置</title>
    <link href="http://s.amlove.cn/2017/03/12/hexo/docs/configuration/"/>
    <id>http://s.amlove.cn/2017/03/12/hexo/docs/configuration/</id>
    <published>2017-03-12T11:35:02.000Z</published>
    <updated>2017-03-13T14:27:20.471Z</updated>
    
    <content type="html"><![CDATA[<p>您可以在 <code>_config.yml</code> 中修改大部份的配置。</p>
<h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>title</code></td>
<td>网站标题</td>
</tr>
<tr>
<td><code>subtitle</code></td>
<td>网站副标题</td>
</tr>
<tr>
<td><code>description</code></td>
<td>网站描述</td>
</tr>
<tr>
<td><code>author</code></td>
<td>您的名字</td>
</tr>
<tr>
<td><code>language</code></td>
<td>网站使用的语言</td>
</tr>
<tr>
<td><code>timezone</code></td>
<td>网站时区。Hexo 默认使用您电脑的时区。<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" target="_blank" rel="external">时区列表</a>。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</td>
</tr>
</tbody>
</table>
<p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p>
<h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>url</code></td>
<td>网址</td>
<td></td>
</tr>
<tr>
<td><code>root</code></td>
<td>网站根目录</td>
<td></td>
</tr>
<tr>
<td><code>permalink</code></td>
<td>文章的 <a href="/2017/03/12/hexo/docs/permalinks/" title="永久链接（Permalinks）">永久链接（Permalinks）</a> 格式</td>
<td><code>:year/:month/:day/:title/</code></td>
</tr>
<tr>
<td><code>permalink_defaults</code></td>
<td>永久链接中各部分的默认值</td>
<td></td>
</tr>
</tbody>
</table>
<blockquote class="note info"><strong class="note-title">网站存放在子目录</strong><p>如果您的网站存放在子目录中，例如 <code>http://yoursite.com/blog</code>，则请将您的 <code>url</code> 设为 <code>http://yoursite.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p>
</blockquote>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>source_dir</code></td>
<td>资源文件夹，这个文件夹用来存放内容。</td>
<td><code>source</code></td>
</tr>
<tr>
<td><code>public_dir</code></td>
<td>公共文件夹，这个文件夹用于存放生成的站点文件。</td>
<td><code>public</code></td>
</tr>
<tr>
<td><code>tag_dir</code></td>
<td>标签文件夹</td>
<td><code>tags</code></td>
</tr>
<tr>
<td><code>archive_dir</code></td>
<td>归档文件夹</td>
<td><code>archives</code></td>
</tr>
<tr>
<td><code>category_dir</code></td>
<td>分类文件夹</td>
<td><code>categories</code></td>
</tr>
<tr>
<td><code>code_dir</code></td>
<td>Include code 文件夹</td>
<td><code>downloads/code</code></td>
</tr>
<tr>
<td><code>i18n_dir</code></td>
<td>国际化（i18n）文件夹</td>
<td><code>:lang</code></td>
</tr>
<tr>
<td><code>skip_render</code></td>
<td>跳过指定文件的渲染，您可使用 <a href="https://github.com/isaacs/node-glob" target="_blank" rel="external">glob 表达式</a>来匹配路径。</td>
<td></td>
</tr>
</tbody>
</table>
<blockquote class="note info"><strong class="note-title">提示</strong><p>如果您刚刚开始接触Hexo，通常没有必要修改这一部分的值。</p>
</blockquote>
<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>new_post_name</code></td>
<td>新文章的文件名称</td>
<td>:title.md</td>
</tr>
<tr>
<td><code>default_layout</code></td>
<td>预设布局</td>
<td>post</td>
</tr>
<tr>
<td><code>auto_spacing</code></td>
<td>在中文和英文之间加入空格</td>
<td>false</td>
</tr>
<tr>
<td><code>titlecase</code></td>
<td>把标题转换为 title case</td>
<td>false</td>
</tr>
<tr>
<td><code>external_link</code></td>
<td>在新标签中打开链接</td>
<td>true</td>
</tr>
<tr>
<td><code>filename_case</code></td>
<td>把文件名称转换为 (1) 小写或 (2) 大写</td>
<td>0</td>
</tr>
<tr>
<td><code>render_drafts</code></td>
<td>显示草稿</td>
<td>false</td>
</tr>
<tr>
<td><code>post_asset_folder</code></td>
<td>启动 <a href="/2017/03/12/hexo/docs/asset-folders/" title="资源文件夹">资源文件夹</a></td>
<td>false</td>
</tr>
<tr>
<td><code>relative_link</code></td>
<td>把链接改为与根目录的相对位址</td>
<td>false</td>
</tr>
<tr>
<td><code>future</code></td>
<td>显示未来的文章</td>
<td>true</td>
</tr>
<tr>
<td><code>highlight</code></td>
<td>代码块的设置</td>
<td></td>
</tr>
</tbody>
</table>
<blockquote class="note info"><strong class="note-title">相对地址</strong><p>默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为<code>example.com</code>,您有一篇文章名为<code>hello</code>，那么绝对链接可能像这样：<code>http://example.com/hello.html</code>，它是<strong>绝对</strong>于域名的。相对链接像这样：<code>/hello.html</code>，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</p>
</blockquote>
<h2 id="分类-amp-标签"><a href="#分类-amp-标签" class="headerlink" title="分类 &amp; 标签"></a>分类 &amp; 标签</h2><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>default_category</code></td>
<td>默认分类</td>
<td><code>uncategorized</code></td>
</tr>
<tr>
<td><code>category_map</code></td>
<td>分类别名</td>
<td></td>
</tr>
<tr>
<td><code>tag_map</code></td>
<td>标签别名</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="日期-时间格式"><a href="#日期-时间格式" class="headerlink" title="日期 / 时间格式"></a>日期 / 时间格式</h2><p>Hexo 使用 <a href="http://momentjs.com/" target="_blank" rel="external">Moment.js</a> 来解析和显示时间。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>date_format</code></td>
<td>日期格式</td>
<td><code>YYYY-MM-DD</code></td>
</tr>
<tr>
<td><code>time_format</code></td>
<td>时间格式</td>
<td><code>H:mm:ss</code></td>
</tr>
</tbody>
</table>
<h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>per_page</code></td>
<td>每页显示的文章量 (0 = 关闭分页功能)</td>
<td><code>10</code></td>
</tr>
<tr>
<td><code>pagination_dir</code></td>
<td>分页目录</td>
<td><code>page</code></td>
</tr>
</tbody>
</table>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>theme</code></td>
<td>当前主题名称。值为<code>false</code>时禁用主题</td>
</tr>
<tr>
<td><code>deploy</code></td>
<td>部署部分的设置</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;您可以在 &lt;code&gt;_config.yml&lt;/code&gt; 中修改大部份的配置。&lt;/p&gt;
&lt;h2 id=&quot;网站&quot;&gt;&lt;a href=&quot;#网站&quot; class=&quot;headerlink&quot; title=&quot;网站&quot;&gt;&lt;/a&gt;网站&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;
    
    </summary>
    
      <category term="hexo指南" scheme="http://s.amlove.cn/categories/hexo%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="hexo" scheme="http://s.amlove.cn/tags/hexo/"/>
    
      <category term="hexo指南" scheme="http://s.amlove.cn/tags/hexo%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 接口说明</title>
    <link href="http://s.amlove.cn/2017/03/12/hexo/api/Hexo%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E/"/>
    <id>http://s.amlove.cn/2017/03/12/hexo/api/Hexo接口说明/</id>
    <published>2017-03-12T11:35:02.000Z</published>
    <updated>2017-03-13T13:42:00.893Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><a href="/2017/03/12/hexo/api/index/" title="API">API</a></li>
<li><a href="/2017/03/12/hexo/api/events/" title="事件">事件</a></li>
<li><a href="/2017/03/12/hexo/api/locals/" title="局部变量">局部变量</a></li>
<li><a href="/2017/03/12/hexo/api/router/" title="路由">路由</a></li>
<li><a href="/2017/03/12/hexo/api/box/" title="Box">Box</a></li>
<li><a href="/2017/03/12/hexo/api/rendering/" title="渲染">渲染</a></li>
<li><a href="/2017/03/12/hexo/api/posts/" title="文章">文章</a></li>
<li><a href="/2017/03/12/hexo/api/scaffolds/" title="脚手架（Scaffold）">脚手架（Scaffold）</a></li>
<li><a href="/2017/03/12/hexo/api/themes/" title="主题">主题</a></li>
<li><a href="/2017/03/12/hexo/api/console/" title="控制台（Console）">控制台（Console）</a></li>
<li><a href="/2017/03/12/hexo/api/deployer/" title="部署器（Deployer）">部署器（Deployer）</a></li>
<li><a href="/2017/03/12/hexo/api/filter/" title="过滤器（Filter）">过滤器（Filter）</a></li>
<li><a href="/2017/03/12/hexo/api/generator/" title="生成器（Generator）">生成器（Generator）</a></li>
<li><a href="/2017/03/12/hexo/api/helper/" title="辅助函数（Helper）">辅助函数（Helper）</a></li>
<li><a href="/2017/03/12/hexo/api/migrator/" title="迁移器（Migrator）">迁移器（Migrator）</a></li>
<li><a href="/2017/03/12/hexo/api/processor/" title="处理器（Processor）">处理器（Processor）</a></li>
<li><a href="/2017/03/12/hexo/api/renderer/" title="渲染引擎（Renderer）">渲染引擎（Renderer）</a></li>
<li><a href="/2017/03/12/hexo/api/tag/" title="标签插件（Tag）">标签插件（Tag）</a>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/12/hexo/api/index/&quot; title=&quot;API&quot;&gt;API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/12/hexo/api/events/&quot; title=&quot;事件&quot;&gt;事件&lt;/a&gt;&lt;/li&gt;
&lt;l
    
    </summary>
    
      <category term="hexo接口" scheme="http://s.amlove.cn/categories/hexo%E6%8E%A5%E5%8F%A3/"/>
    
    
      <category term="hexo" scheme="http://s.amlove.cn/tags/hexo/"/>
    
      <category term="hexo接口" scheme="http://s.amlove.cn/tags/hexo%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>控制台（Console）</title>
    <link href="http://s.amlove.cn/2017/03/12/hexo/api/console/"/>
    <id>http://s.amlove.cn/2017/03/12/hexo/api/console/</id>
    <published>2017-03-12T11:35:02.000Z</published>
    <updated>2017-03-13T13:04:04.096Z</updated>
    
    <content type="html"><![CDATA[<p>控制台是 Hexo 与开发者之间沟通的桥梁。</p>
<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><pre><code class="js">hexo.extend.console.register(name, desc, options, function(args){
  // ...
});
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>name</code></td>
<td>名称</td>
</tr>
<tr>
<td><code>desc</code></td>
<td>描述</td>
</tr>
<tr>
<td><code>options</code></td>
<td>选项</td>
</tr>
</tbody>
</table>
<p>在函数中会传入 <code>args</code> 参数，此参数是使用者在终端中所传入的参数，是一个经 <a href="https://github.com/substack/minimist" target="_blank" rel="external">Minimist</a> 解析的对象。</p>
<h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>控制台的操作方法，例如：</p>
<pre><code class="js">{usage: &#39;[layout] &lt;title&gt;&#39;}
// hexo new [layout] &lt;title&gt;
</code></pre>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>控制台各个参数的说明，例如：</p>
<pre><code class="js">{
  arguments: [
    {name: &#39;layout&#39;, desc: &#39;Post layout&#39;},
    {name: &#39;title&#39;, desc: &#39;Post title&#39;}
  ]
}
</code></pre>
<h3 id="选项-1"><a href="#选项-1" class="headerlink" title="选项"></a>选项</h3><p>控制台的选项，例如：</p>
<pre><code class="js">{
  options: [
    {name: &#39;-r, --replace&#39;, desc: &#39;Replace existing files&#39;}
  ]
}
</code></pre>
<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>控制台更详细的说明。</p>
<h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><pre><code class="js">hexo.extend.console.register(&#39;config&#39;, &#39;Display configuration&#39;, function(args){
  console.log(hexo.config);
});
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;控制台是 Hexo 与开发者之间沟通的桥梁。&lt;/p&gt;
&lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;js&quot;&gt;hexo.extend.console.r
    
    </summary>
    
      <category term="hexo接口" scheme="http://s.amlove.cn/categories/hexo%E6%8E%A5%E5%8F%A3/"/>
    
    
      <category term="hexo" scheme="http://s.amlove.cn/tags/hexo/"/>
    
      <category term="hexo接口" scheme="http://s.amlove.cn/tags/hexo%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>Box</title>
    <link href="http://s.amlove.cn/2017/03/12/hexo/api/box/"/>
    <id>http://s.amlove.cn/2017/03/12/hexo/api/box/</id>
    <published>2017-03-12T11:35:02.000Z</published>
    <updated>2017-03-13T12:55:57.985Z</updated>
    
    <content type="html"><![CDATA[<p>「Box」是 Hexo 用来处理特定文件夹中的文件的容器，在 Hexo 中有两个 Box，分别是 <code>hexo.source</code> 和 <code>hexo.theme</code>，前者用于处理 <code>source</code> 文件夹，而后者用于处理主题文件夹。</p>
<h2 id="载入文件"><a href="#载入文件" class="headerlink" title="载入文件"></a>载入文件</h2><p>Box 提供了两种方法来载入文件：<code>process</code>, <code>watch</code>，前者用于载入文件夹内的所有文件；而后者除了执行 <code>process</code> 以外，还会继续监视文件变动。</p>
<pre><code class="js">box.process().then(function(){
  // ...
});

box.watch().then(function(){
  // 之后可调用 box.unwatch()，停止监视文件
});
</code></pre>
<h2 id="比对路径"><a href="#比对路径" class="headerlink" title="比对路径"></a>比对路径</h2><p>Box 提供了多种比对路径的模式，您可以以使用正则表达式（regular expression）、函数、或是一种类似于 Express 的路径字符串，例如：</p>
<pre><code class="plain">posts/:id =&gt; posts/89
posts/*path =&gt; posts/2015/title
</code></pre>
<p>您可以以参考 <a href="https://github.com/hexojs/hexo-util#patternrule" target="_blank" rel="external">util.Pattern</a> 以获得更多信息。</p>
<h2 id="处理器（Processor）"><a href="#处理器（Processor）" class="headerlink" title="处理器（Processor）"></a>处理器（Processor）</h2><p>处理器（Processor）是 Box 中非常重要的元素，它用于处理文件，您可以使用上述的路径对比来限制该处理器所要处理的文件类型。使用 <code>addProcessor</code> 来添加处理器。</p>
<pre><code class="js">box.addProcessor(&#39;posts/:id&#39;, function(file){
  //
});
</code></pre>
<p>Box 在处理时会把目前处理的文件内容（<code>file</code>）传给处理器，您可以通过此参数获得该文件的数据。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>source</code></td>
<td>文件完整路径</td>
</tr>
<tr>
<td><code>path</code></td>
<td>文件相对于 Box 的路径</td>
</tr>
<tr>
<td><code>type</code></td>
<td>文件类型。有 <code>create</code>, <code>update</code>, <code>skip</code>, <code>delete</code>。</td>
</tr>
<tr>
<td><code>params</code></td>
<td>从路径对比中取得的信息</td>
</tr>
</tbody>
</table>
<p>Box 还提供了一些方法，让您无须手动处理文件 I/O。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>read</code></td>
<td>读取文件</td>
</tr>
<tr>
<td><code>readSync</code></td>
<td>同步读取文件</td>
</tr>
<tr>
<td><code>stat</code></td>
<td>读取文件状态</td>
</tr>
<tr>
<td><code>statSync</code></td>
<td>同步读取文件状态</td>
</tr>
<tr>
<td><code>render</code></td>
<td>渲染文件</td>
</tr>
<tr>
<td><code>renderSync</code></td>
<td>同步渲染文件</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「Box」是 Hexo 用来处理特定文件夹中的文件的容器，在 Hexo 中有两个 Box，分别是 &lt;code&gt;hexo.source&lt;/code&gt; 和 &lt;code&gt;hexo.theme&lt;/code&gt;，前者用于处理 &lt;code&gt;source&lt;/code&gt; 文件夹，而后者用于处
    
    </summary>
    
      <category term="hexo接口" scheme="http://s.amlove.cn/categories/hexo%E6%8E%A5%E5%8F%A3/"/>
    
    
      <category term="hexo" scheme="http://s.amlove.cn/tags/hexo/"/>
    
      <category term="hexo接口" scheme="http://s.amlove.cn/tags/hexo%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 新手记</title>
    <link href="http://s.amlove.cn/2017/03/12/hexo/learn/Hexo-%E6%96%B0%E6%89%8B%E8%AE%B0/"/>
    <id>http://s.amlove.cn/2017/03/12/hexo/learn/Hexo-新手记/</id>
    <published>2017-03-12T11:35:02.000Z</published>
    <updated>2017-03-13T13:08:33.423Z</updated>
    
    <content type="html"><![CDATA[<p>准备使用 hexo 来写博客</p>
<pre><code># 先安装
npm install -g hexo-cli

# 初始化博客目录
hexo init blog-dir

# 生成静态页面
hexo generate

# 本地启动
hexo server

# 部署到github
  修改 _config.yml
  deploy: 
    type: git
    repo: https://github.com/amlove-cn/amlove-cn.github.io.git
    branch: master

hexo deploy
</code></pre><h1 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h1><p><code>hexo-theme-3-hexo</code> 是个很棒的主题,要使用它,可以按以下步骤来进行:</p>
<pre><code># 安装主题
git clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo

# 修改hexo根目录的_config.yml的两处，如下
theme: 3-hexo
highlight:
  enable: false #关闭hexo渲染高亮，使用主题代码块高亮

# 重新 生成
hexo g
</code></pre><h1 id="生成rss-和-sitemap"><a href="#生成rss-和-sitemap" class="headerlink" title="生成rss 和 sitemap"></a>生成rss 和 sitemap</h1><pre><code># 安装以下两个插件就可以直接生成
npm install hexo-generator-feed --save
npm install hexo-generator-sitemap --save
</code></pre><h1 id="使用标签-和-分类"><a href="#使用标签-和-分类" class="headerlink" title="使用标签 和 分类"></a>使用标签 和 分类</h1><pre><code># 标签和分类都是在文章中来指定的,通过指令去自动生成的
---
title: Hexo 新手记
date: 2017-03-12 19:35:02
categories: &quot;Hexo教程&quot; #文章分類目錄
tags: [Hexo, 入门] #文章标签
description: 搭建 Hexo 博客写作环境
---
</code></pre><h1 id="第三方服务"><a href="#第三方服务" class="headerlink" title="第三方服务"></a>第三方服务</h1><ul>
<li>评论服务:<br>可以使用 多说,youyan,disqus 等</li>
<li>站点统计服务:<br>百度统计,谷歌统计,不蒜子网站计数</li>
</ul>
<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题:"></a>遇到的问题:</h1><ul>
<li>error deployer not found:git<br>缺少插件 <code>npm install hexo-deployer-git --save</code> 的原因</li>
<li>wordcount 未定义<br>缺少插件 <code>npm install hexo-wordcount --save</code> 的原因,<a href="http://www.jianshu.com/p/e122fc6f5946" target="_blank" rel="external">参见</a></li>
<li>部署之后,CNAME被冲掉<br>解决方法就是在 <code>source</code> 目录新建一个<code>CNAME</code>文件,其中写着域名</li>
<li>文章描述出现多行该如何解决?<br>尚不知晓</li>
</ul>
]]></content>
    
    <summary type="html">
    
      搭建 Hexo 博客写作环境
    
    </summary>
    
      <category term="hexo入门" scheme="http://s.amlove.cn/categories/hexo%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="hexo" scheme="http://s.amlove.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>写作</title>
    <link href="http://s.amlove.cn/2017/03/12/hexo/docs/writing/"/>
    <id>http://s.amlove.cn/2017/03/12/hexo/docs/writing/</id>
    <published>2017-03-12T11:35:02.000Z</published>
    <updated>2017-03-13T12:52:19.299Z</updated>
    
    <content type="html"><![CDATA[<p>你可以执行下列命令来创建一篇新文章。</p>
<pre><code class="bash">$ hexo new [layout] &lt;title&gt;
</code></pre>
<p>您可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p>
<h3 id="布局（Layout）"><a href="#布局（Layout）" class="headerlink" title="布局（Layout）"></a>布局（Layout）</h3><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p>
<table>
<thead>
<tr>
<th>布局</th>
<th>路径</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>post</code></td>
<td><code>source/_posts</code></td>
</tr>
<tr>
<td><code>page</code></td>
<td><code>source</code></td>
</tr>
<tr>
<td><code>draft</code></td>
<td><code>source/_drafts</code></td>
</tr>
</tbody>
</table>
<blockquote class="note tip"><strong class="note-title">不要处理我的文章</strong><p>如果你不想你的文章被处理，你可以将 Front-Matter 中的<code>layout:</code> 设为 <code>false</code> 。</p>
</blockquote>
<h3 id="文件名称"><a href="#文件名称" class="headerlink" title="文件名称"></a>文件名称</h3><p>Hexo 默认以标题做为文件名称，但您可编辑 <code>new_post_name</code> 参数来改变默认的文件名称，举例来说，设为 <code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章。</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:title</code></td>
<td>标题（小写，空格将会被替换为短杠）</td>
</tr>
<tr>
<td><code>:year</code></td>
<td>建立的年份，比如， <code>2015</code></td>
</tr>
<tr>
<td><code>:month</code></td>
<td>建立的月份（有前导零），比如， <code>04</code></td>
</tr>
<tr>
<td><code>:i_month</code></td>
<td>建立的月份（无前导零），比如， <code>4</code></td>
</tr>
<tr>
<td><code>:day</code></td>
<td>建立的日期（有前导零），比如， <code>07</code></td>
</tr>
<tr>
<td><code>:i_day</code></td>
<td>建立的日期（无前导零），比如， <code>7</code></td>
</tr>
</tbody>
</table>
<h3 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h3><p>刚刚提到了 Hexo 的一种特殊布局：<code>draft</code>，这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹，您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹，该命令的使用方式与 <code>new</code> 十分类似，您也可在命令中指定 <code>layout</code> 来指定布局。</p>
<pre><code class="bash">$ hexo publish [layout] &lt;title&gt;
</code></pre>
<p>草稿默认不会显示在页面中，您可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿。</p>
<h2 id="模版（Scaffold）"><a href="#模版（Scaffold）" class="headerlink" title="模版（Scaffold）"></a>模版（Scaffold）</h2><p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p>
<pre><code class="bash">$ hexo new photo &quot;My Gallery&quot;
</code></pre>
<p>在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>photo.md</code>，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>layout</code></td>
<td>布局</td>
</tr>
<tr>
<td><code>title</code></td>
<td>标题</td>
</tr>
<tr>
<td><code>date</code></td>
<td>文件建立日期</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你可以执行下列命令来创建一篇新文章。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ hexo new [layout] &amp;lt;title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;您可以在命令中指定文章的布局（layout），默认为 &lt;code&gt;post&lt;/
    
    </summary>
    
      <category term="hexo指南" scheme="http://s.amlove.cn/categories/hexo%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="hexo" scheme="http://s.amlove.cn/tags/hexo/"/>
    
      <category term="hexo指南" scheme="http://s.amlove.cn/tags/hexo%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>变量</title>
    <link href="http://s.amlove.cn/2017/03/12/hexo/docs/variables/"/>
    <id>http://s.amlove.cn/2017/03/12/hexo/docs/variables/</id>
    <published>2017-03-12T11:35:02.000Z</published>
    <updated>2017-03-13T12:52:21.764Z</updated>
    
    <content type="html"><![CDATA[<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>site</code></td>
<td><a href="#网站变量">网站变量</a></td>
</tr>
<tr>
<td><code>page</code></td>
<td>针对该页面的内容以及 front-matter 所设定的变量。</td>
</tr>
<tr>
<td><code>config</code></td>
<td>网站配置</td>
</tr>
<tr>
<td><code>theme</code></td>
<td>主题配置。继承自网站配置。</td>
</tr>
<tr>
<td><code>_</code> (单下划线)</td>
<td><a href="http://lodash.com/" target="_blank" rel="external">Lodash</a> 函数库</td>
</tr>
<tr>
<td><code>path</code></td>
<td>当前页面的路径（不含根路径）</td>
</tr>
<tr>
<td><code>url</code></td>
<td>当前页面的完整网址</td>
</tr>
<tr>
<td><code>env</code></td>
<td>环境变量</td>
</tr>
</tbody>
</table>
<h3 id="网站变量"><a href="#网站变量" class="headerlink" title="网站变量"></a>网站变量</h3><table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>site.posts</code></td>
<td>所有文章</td>
</tr>
<tr>
<td><code>site.pages</code></td>
<td>所有分页</td>
</tr>
<tr>
<td><code>site.categories</code></td>
<td>所有分类</td>
</tr>
<tr>
<td><code>site.tags</code></td>
<td>所有标签</td>
</tr>
</tbody>
</table>
<h3 id="页面变量"><a href="#页面变量" class="headerlink" title="页面变量"></a>页面变量</h3><p><strong>页面（page）</strong></p>
<table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>page.title</code></td>
<td>页面标题</td>
</tr>
<tr>
<td><code>page.date</code></td>
<td>页面建立日期（<a href="http://momentjs.com/" target="_blank" rel="external">Moment.js</a> 对象）</td>
</tr>
<tr>
<td><code>page.updated</code></td>
<td>页面更新日期（<a href="http://momentjs.com/" target="_blank" rel="external">Moment.js</a> 对象）</td>
</tr>
<tr>
<td><code>page.comments</code></td>
<td>留言是否开启</td>
</tr>
<tr>
<td><code>page.layout</code></td>
<td>布局名称</td>
</tr>
<tr>
<td><code>page.content</code></td>
<td>页面的完整内容</td>
</tr>
<tr>
<td><code>page.excerpt</code></td>
<td>页面摘要</td>
</tr>
<tr>
<td><code>page.more</code></td>
<td>除了页面摘要的其余内容</td>
</tr>
<tr>
<td><code>page.source</code></td>
<td>页面原始路径</td>
</tr>
<tr>
<td><code>page.full_source</code></td>
<td>页面的完整原始路径</td>
</tr>
<tr>
<td><code>page.path</code></td>
<td>页面网址（不含根路径）。我们通常在主题中使用 <code>url_for(page.path)</code>。</td>
</tr>
<tr>
<td><code>page.permalink</code></td>
<td>页面的完整网址</td>
</tr>
<tr>
<td><code>page.prev</code></td>
<td>上一个页面。如果此为第一个页面则为 <code>null</code>。</td>
</tr>
<tr>
<td><code>page.next</code></td>
<td>下一个页面。如果此为最后一个页面则为 <code>null</code>。</td>
</tr>
<tr>
<td><code>page.raw</code></td>
<td>文章的原始内容</td>
</tr>
<tr>
<td><code>page.photos</code></td>
<td>文章的照片（用于相簿）</td>
</tr>
<tr>
<td><code>page.link</code></td>
<td>文章的外部链接（用于链接文章）</td>
</tr>
</tbody>
</table>
<p><strong>文章 (post):</strong> 和 <code>page</code> 布局类似，但是添加了下列变量。</p>
<table>
<thead>
<tr>
<th>Variable</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>page.published</code></td>
<td>如果该文章已发布则为True</td>
</tr>
<tr>
<td><code>page.categories</code></td>
<td>该文章的所有分类</td>
</tr>
<tr>
<td><code>page.tags</code></td>
<td>该文章的所有标签</td>
</tr>
</tbody>
</table>
<p><strong>首页（index）</strong></p>
<table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>page.per_page</code></td>
<td>每页显示的文章数量</td>
</tr>
<tr>
<td><code>page.total</code></td>
<td>总文章数</td>
</tr>
<tr>
<td><code>page.current</code></td>
<td>目前页数</td>
</tr>
<tr>
<td><code>page.current_url</code></td>
<td>目前分页的网址</td>
</tr>
<tr>
<td><code>page.posts</code></td>
<td>本页文章</td>
</tr>
<tr>
<td><code>page.prev</code></td>
<td>上一页的页数。如果此页是第一页的话则为 <code>0</code>。</td>
</tr>
<tr>
<td><code>page.prev_link</code></td>
<td>上一页的网址。如果此页是第一页的话则为 <code>&#39;&#39;</code>。</td>
</tr>
<tr>
<td><code>page.next</code></td>
<td>下一页的页数。如果此页是最后一页的话则为 <code>0</code>。</td>
</tr>
<tr>
<td><code>page.next_link</code></td>
<td>下一页的网址。如果此页是最后一页的话则为 <code>&#39;&#39;</code>。</td>
</tr>
<tr>
<td><code>page.path</code></td>
<td>当前页面的路径（不含根目录）。我们通常在主题中使用 <code>url_for(page.path)</code>。</td>
</tr>
</tbody>
</table>
<p><strong>归档 (archive)</strong>：与 <code>index</code> 布局相同，但新增以下变量。</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>page.archive</code></td>
<td>等于 <code>true</code></td>
</tr>
<tr>
<td><code>page.year</code></td>
<td>年份归档 (4位)</td>
</tr>
<tr>
<td><code>page.month</code></td>
<td>月份归档 (没有前导零的2位数)</td>
</tr>
</tbody>
</table>
<p><strong>分类 (category)</strong>：与 <code>index</code> 布局相同，但新增以下变量。</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>page.category</code></td>
<td>分类名称</td>
</tr>
</tbody>
</table>
<p><strong>标签 (tag)</strong>：与 <code>index</code> 布局相同，但新增以下变量。</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>page.tag</code></td>
<td>标签名称</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;全局变量&quot;&gt;&lt;a href=&quot;#全局变量&quot; class=&quot;headerlink&quot; title=&quot;全局变量&quot;&gt;&lt;/a&gt;全局变量&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;变量&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbod
    
    </summary>
    
      <category term="hexo指南" scheme="http://s.amlove.cn/categories/hexo%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="hexo" scheme="http://s.amlove.cn/tags/hexo/"/>
    
      <category term="hexo指南" scheme="http://s.amlove.cn/tags/hexo%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>事件</title>
    <link href="http://s.amlove.cn/2017/03/12/hexo/api/events/"/>
    <id>http://s.amlove.cn/2017/03/12/hexo/api/events/</id>
    <published>2017-03-12T11:35:02.000Z</published>
    <updated>2017-03-13T13:04:04.096Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 继承了 <a href="http://nodejs.org/api/events.html" target="_blank" rel="external">EventEmitter</a>，您可以用 <code>on</code> 方法监听 Hexo 所发布的事件，也可以使用 <code>emit</code> 方法对 Hexo 发布事件，更详细的说明请参阅 Node.js 的 API。</p>
<h3 id="deployBefore"><a href="#deployBefore" class="headerlink" title="deployBefore"></a>deployBefore</h3><p>在部署完成前发布。</p>
<h3 id="deployAfter"><a href="#deployAfter" class="headerlink" title="deployAfter"></a>deployAfter</h3><p>在部署成功后发布。</p>
<h3 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h3><p>在 Hexo 结束前发布。</p>
<h3 id="generateBefore"><a href="#generateBefore" class="headerlink" title="generateBefore"></a>generateBefore</h3><p>在静态文件生成前发布。</p>
<h3 id="generateAfter"><a href="#generateAfter" class="headerlink" title="generateAfter"></a>generateAfter</h3><p>在静态文件生成后发布。</p>
<h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><p>在文章文件建立后发布。该事件返回文章参数。</p>
<pre><code class="js">hexo.on(&#39;new&#39;, function(post){
  // 
});
</code></pre>
<table>
<thead>
<tr>
<th>资料</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>post.path</code></td>
<td>文章文件的完整路径</td>
</tr>
<tr>
<td><code>post.content</code></td>
<td>文章文件的内容</td>
</tr>
</tbody>
</table>
<h3 id="processBefore"><a href="#processBefore" class="headerlink" title="processBefore"></a>processBefore</h3><p>在处理原始文件前发布。此事件会返回一个地址，代表 Box（Box）的根目录。</p>
<h3 id="processAfter"><a href="#processAfter" class="headerlink" title="processAfter"></a>processAfter</h3><p>在原始文件处理后发布。此事件会返回一个地址，代表 Box（Box）的根目录。</p>
<h3 id="ready"><a href="#ready" class="headerlink" title="ready"></a>ready</h3><p>在初始化完成后发布。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo 继承了 &lt;a href=&quot;http://nodejs.org/api/events.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EventEmitter&lt;/a&gt;，您可以用 &lt;code&gt;on&lt;/code&gt; 方法监听 Hexo 所发布的事
    
    </summary>
    
      <category term="hexo接口" scheme="http://s.amlove.cn/categories/hexo%E6%8E%A5%E5%8F%A3/"/>
    
    
      <category term="hexo" scheme="http://s.amlove.cn/tags/hexo/"/>
    
      <category term="hexo接口" scheme="http://s.amlove.cn/tags/hexo%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>问题解答</title>
    <link href="http://s.amlove.cn/2017/03/12/hexo/docs/troubleshooting/"/>
    <id>http://s.amlove.cn/2017/03/12/hexo/docs/troubleshooting/</id>
    <published>2017-03-12T11:35:02.000Z</published>
    <updated>2017-03-13T12:52:21.749Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 Hexo 时，您可能会遇到一些问题，下列的常见问题解答可能会对您有所帮助。如果您在这里找不道解答，可以在 <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a> 或 <a href="https://groups.google.com/group/hexo" target="_blank" rel="external">Google Group</a> 上提问。</p>
<h2 id="YAML-解析错误"><a href="#YAML-解析错误" class="headerlink" title="YAML 解析错误"></a>YAML 解析错误</h2><pre><code class="plain">JS-YAML: incomplete explicit mapping pair; a key node is missed at line 18, column 29:
      last_updated: Last updated: %s
</code></pre>
<p>如果 YAML 字符串中包含冒号（<code>:</code>）的话，请加上引号。</p>
<pre><code class="plain">JS-YAML: bad indentation of a mapping entry at line 18, column 31:
      last_updated:&quot;Last updated: %s&quot;
</code></pre>
<p>请确认您使用空格进行缩进（Soft tab），并确认冒号后有加上一个空格。</p>
<p>您可参阅 <a href="http://www.yaml.org/spec/1.2/spec.html" target="_blank" rel="external">YAML 规范</a> 以取得更多信息。</p>
<h2 id="EMFILE-错误"><a href="#EMFILE-错误" class="headerlink" title="EMFILE 错误"></a>EMFILE 错误</h2><pre><code class="plain">Error: EMFILE, too many open files
</code></pre>
<p>虽然 Node.js 有非阻塞 I/O，同步 I/O 的数量仍被系统所限制，在生成大量静态文件的时候，您可能会碰到 EMFILE 错误，您可以尝试提高同步 I/O 的限制数量来解决此问题。</p>
<pre><code class="bash">$ ulimit -n 10000
</code></pre>
<p>（这一命令只对Linux系统有效）</p>
<h2 id="Git-部署问题"><a href="#Git-部署问题" class="headerlink" title="Git 部署问题"></a>Git 部署问题</h2><pre><code class="plain">fatal: &#39;username.github.io&#39; does not appear to be a git repository
</code></pre>
<p>请确认您已经在电脑上 <a href="https://help.github.com/articles/set-up-git" target="_blank" rel="external">配置 git</a>，或改用 HTTPS 库（repository）地址。</p>
<h2 id="服务器问题"><a href="#服务器问题" class="headerlink" title="服务器问题"></a>服务器问题</h2><pre><code class="plain">Error: listen EADDRINUSE
</code></pre>
<p>您可能同时开启两个 Hexo 服务器，或者有其他应用程序正在占用相同的端口，请尝试修改 <code>port</code> 参数，或是在启动 Hexo 服务器时加上 <code>-p</code> 选项。</p>
<pre><code class="bash">$ hexo server -p 5000
</code></pre>
<h2 id="插件安装问题"><a href="#插件安装问题" class="headerlink" title="插件安装问题"></a>插件安装问题</h2><pre><code class="plain">npm ERR! node-waf configure build
</code></pre>
<p>当您尝试安装以 C/C++ 或其他非 JavaScript 语言所编写的插件时，可能会遇到此类问题，请确认您已经在电脑上安装相对应的编译器。</p>
<h2 id="DTrace-错误-（Mac-OS-X）"><a href="#DTrace-错误-（Mac-OS-X）" class="headerlink" title="DTrace 错误 （Mac OS X）"></a>DTrace 错误 （Mac OS X）</h2><pre><code class="plain">{ [Error: Cannot find module &#39;./build/Release/DTraceProviderBindings&#39;] code: &#39;MODULE_NOT_FOUND&#39; }
{ [Error: Cannot find module &#39;./build/default/DTraceProviderBindings&#39;] code: &#39;MODULE_NOT_FOUND&#39; }
{ [Error: Cannot find module &#39;./build/Debug/DTraceProviderBindings&#39;] code: &#39;MODULE_NOT_FOUND&#39; }
</code></pre>
<p>DTrace 安装可能有错误 , 使用下列命令:</p>
<pre><code class="sh">$ npm install hexo --no-optional
</code></pre>
<p>参考 <a href="https://github.com/hexojs/hexo/issues/1326#issuecomment-113871796" target="_blank" rel="external">#1326</a></p>
<h2 id="在-Jade-或-Swig-遍历资料"><a href="#在-Jade-或-Swig-遍历资料" class="headerlink" title="在 Jade 或 Swig 遍历资料"></a>在 Jade 或 Swig 遍历资料</h2><p>Hexo 使用 <a href="https://github.com/tommy351/warehouse" target="_blank" rel="external">Warehouse</a> 存储资料，它不是一般数组所以必须先进行类型转型才能遍历。</p>
<pre><code>{% for post in site.posts.toArray() %}
{% endfor %}
</code></pre><h2 id="资料没有更新"><a href="#资料没有更新" class="headerlink" title="资料没有更新"></a>资料没有更新</h2><p>有时资料可能没有被更新，或是生成的文件与修改前的相同，您可以尝试清除缓存并再执行一次。</p>
<pre><code class="bash">$ hexo clean
</code></pre>
<h2 id="泄露（Escape）内容"><a href="#泄露（Escape）内容" class="headerlink" title="泄露（Escape）内容"></a>泄露（Escape）内容</h2><p>Hexo 使用 <a href="http://mozilla.github.io/nunjucks/" target="_blank" rel="external">Nunjucks</a> 来解析文章（旧版本使用 <a href="http://paularmstrong.github.io/swig/" target="_blank" rel="external">Swig</a>，两者语法类似），内容若包含 <code>{{ }}</code> 或 <code>{% %}</code> 可能导致解析错误，您可以用 <code>raw</code> 标签包裹来避免潜在问题发生。</p>
<pre><code>{% raw %}
Hello {{ sensitive }}
{% endraw %}
</code></pre><h2 id="ENOSPC-错误-（Linux）"><a href="#ENOSPC-错误-（Linux）" class="headerlink" title="ENOSPC 错误 （Linux）"></a>ENOSPC 错误 （Linux）</h2><p>运行 <code>$ hexo server</code> 命令有时会返回这样的错误：</p>
<pre><code>Error: watch ENOSPC ...
</code></pre><p>它可以用过运行 <code>$ npm dedupe</code> 来解决，如果不起作用的话，可以尝试在 Linux 终端中运行下列命令：</p>
<pre><code>$ echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p
</code></pre><p>这将会提高你能监视的文件数量。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用 Hexo 时，您可能会遇到一些问题，下列的常见问题解答可能会对您有所帮助。如果您在这里找不道解答，可以在 &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;G
    
    </summary>
    
      <category term="hexo指南" scheme="http://s.amlove.cn/categories/hexo%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="hexo" scheme="http://s.amlove.cn/tags/hexo/"/>
    
      <category term="hexo指南" scheme="http://s.amlove.cn/tags/hexo%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>主题</title>
    <link href="http://s.amlove.cn/2017/03/12/hexo/docs/themes/"/>
    <id>http://s.amlove.cn/2017/03/12/hexo/docs/themes/</id>
    <published>2017-03-12T11:35:02.000Z</published>
    <updated>2017-03-13T14:43:06.430Z</updated>
    
    <content type="html"><![CDATA[<p>创建 Hexo 主题非常容易，您只要在 <code>themes</code> 文件夹内，新增一个任意名称的文件夹，并修改 <code>_config.yml</code> 内的 <code>theme</code> 设定，即可切换主题。一个主题可能会有以下的结构：</p>
<pre><code class="plain">.
├── _config.yml
├── languages
├── layout
├── scripts
└── source
</code></pre>
<h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>主题的配置文件。修改时会自动更新，无需重启服务器。</p>
<h3 id="languages"><a href="#languages" class="headerlink" title="languages"></a>languages</h3><p>语言文件夹。请参见 <a href="/2017/03/12/hexo/docs/internationalization/" title="国际化（i18n）">国际化（i18n）</a>。</p>
<h3 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h3><p>布局文件夹。用于存放主题的模板文件，决定了网站内容的呈现方式，Hexo 内建 <a href="http://paularmstrong.github.com/swig/" target="_blank" rel="external">Swig</a> 模板引擎，您可以另外安装插件来获得 <a href="https://github.com/hexojs/hexo-renderer-ejs" target="_blank" rel="external">EJS</a>、<a href="https://github.com/hexojs/hexo-renderer-haml" target="_blank" rel="external">Haml</a> 或 <a href="https://github.com/hexojs/hexo-renderer-jade" target="_blank" rel="external">Jade</a> 支持，Hexo 根据模板文件的扩展名来决定所使用的模板引擎，例如：</p>
<pre><code class="plain">layout.ejs   - 使用 EJS
layout.swig  - 使用 Swig
</code></pre>
<p>您可参考 <a href="/2017/03/12/hexo/docs/templates/" title="模版">模版</a> 以获得更多信息。</p>
<h3 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h3><p>脚本文件夹。在启动时，Hexo 会载入此文件夹内的 JavaScript 文件，请参见 <a href="/2017/03/12/hexo/docs/plugins/" title="插件">插件</a> 以获得更多信息。</p>
<h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p>资源文件夹，除了模板以外的 Asset，例如 CSS、JavaScript 文件等，都应该放在这个文件夹中。文件或文件夹开头名称为 <code>_</code>（下划线线）或隐藏的文件会被忽略。</p>
<p>如果文件可以被渲染的话，会经过解析然后储存到 <code>public</code> 文件夹，否则会直接拷贝到 <code>public</code> 文件夹。</p>
<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>当您完成主题后，可以考虑将它发布到 <a href="https://hexo.io/themes/" target="_blank" rel="external">主题列表</a>，让更多人能够使用您的主题。在发布前建议先进行 <a href="https://github.com/hexojs/hexo-theme-unit-test" target="_blank" rel="external">主题单元测试</a>，确保每一项功能都能正常使用。发布主题的步骤和 <a href="/2017/03/12/hexo/docs/contributing/#更新文档">更新文档</a> 非常类似。</p>
<ol>
<li>Fork <a href="https://github.com/hexojs/site" target="_blank" rel="external">hexojs/site</a></li>
<li><p>把库（repository）复制到电脑上，并安装所依赖的插件。</p>
 <pre><code>$ git clone https:&#x2F;&#x2F;github.com&#x2F;&lt;username&gt;&#x2F;site.git
$ cd site
$ npm install</code></pre>
</li>
<li><p>编辑 <code>source/_data/themes.yml</code>，在文件中新增您的主题，例如：</p>
 <pre><code>- name: landscape
  description: A brand new default theme for Hexo.
  link: https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexo-theme-landscape
  preview: http:&#x2F;&#x2F;hexo.io&#x2F;hexo-theme-landscape
  tags:
    - official
    - responsive
    - widget
    - two_column
    - one_column</code></pre>
</li>
<li><p>在 <code>source/themes/screenshots</code> 新增同名的截图档案，图片必须为 800x500 的 PNG 文件。</p>
</li>
<li>推送（push）分支。</li>
<li>建立一个新的合并申请（pull request）并描述改动。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建 Hexo 主题非常容易，您只要在 &lt;code&gt;themes&lt;/code&gt; 文件夹内，新增一个任意名称的文件夹，并修改 &lt;code&gt;_config.yml&lt;/code&gt; 内的 &lt;code&gt;theme&lt;/code&gt; 设定，即可切换主题。一个主题可能会有以下的结构：&lt;/p&gt;
    
    </summary>
    
      <category term="hexo指南" scheme="http://s.amlove.cn/categories/hexo%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="hexo" scheme="http://s.amlove.cn/tags/hexo/"/>
    
      <category term="hexo指南" scheme="http://s.amlove.cn/tags/hexo%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>模版</title>
    <link href="http://s.amlove.cn/2017/03/12/hexo/docs/templates/"/>
    <id>http://s.amlove.cn/2017/03/12/hexo/docs/templates/</id>
    <published>2017-03-12T11:35:02.000Z</published>
    <updated>2017-03-13T12:52:21.733Z</updated>
    
    <content type="html"><![CDATA[<p>模板决定了网站内容的呈现方式，每个主题至少都应包含一个 <code>index</code> 模板，以下是各页面相对应的模板名称：</p>
<table>
<thead>
<tr>
<th>模板</th>
<th>用途</th>
<th>回调</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>index</code></td>
<td>首页</td>
<td></td>
</tr>
<tr>
<td><code>post</code></td>
<td>文章</td>
<td><code>index</code></td>
</tr>
<tr>
<td><code>page</code></td>
<td>分页</td>
<td><code>index</code></td>
</tr>
<tr>
<td><code>archive</code></td>
<td>归档</td>
<td><code>index</code></td>
</tr>
<tr>
<td><code>category</code></td>
<td>分类归档</td>
<td><code>archive</code></td>
</tr>
<tr>
<td><code>tag</code></td>
<td>标签归档</td>
<td><code>archive</code></td>
</tr>
</tbody>
</table>
<h2 id="布局（Layout）"><a href="#布局（Layout）" class="headerlink" title="布局（Layout）"></a>布局（Layout）</h2><p>如果页面结构类似，例如两个模板都有页首（Header）和页脚（Footer），您可考虑通过「布局」让两个模板共享相同的结构。一个布局文件必须要能显示 <code>body</code> 变量的内容，如此一来模板的内容才会被显示，举例来说：</p>
<p>``` html index.ejs<br>index</p>
<pre><code>
``` html layout.ejs
&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;body&gt;&lt;%- body %&gt;&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>生成：</p>
<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;body&gt;index&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>每个模板都默认使用 <code>layout</code> 布局，您可在 front-matter 指定其他布局，或是设为 <code>false</code> 来关闭布局功能，您甚至可在布局中再使用其他布局来建立嵌套布局。</p>
<h2 id="局部模版（Partial）"><a href="#局部模版（Partial）" class="headerlink" title="局部模版（Partial）"></a>局部模版（Partial）</h2><p>局部模板让您在不同模板之间共享相同的组件，例如页首（Header）、页脚（Footer）或侧边栏（Sidebar）等，可利用局部模板功能分割为个别文件，让维护更加便利。举例来说：</p>
<p>``` html partial/header.ejs</p>
<p></p><h1 id="logo">&lt;%= config.title %&gt;</h1><p></p>
<pre><code>
``` html index.ejs
&lt;%- partial(&#39;partial/header&#39;) %&gt;
&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;
</code></pre><p>生成：</p>
<pre><code class="html">&lt;h1 id=&quot;logo&quot;&gt;My Site&lt;/h1&gt;
&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;
</code></pre>
<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>您可以在局部模板中指定局部变量并使用。</p>
<p>``` html partial/header.ejs</p>
<p></p><h1 id="logo">&lt;%= title&gt;</h1><p></p>
<pre><code>
``` html index.ejs
&lt;%- partial(&#39;partial/header&#39;, {title: &#39;Hello World&#39;}) %&gt;
&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;
</code></pre><p>生成：</p>
<pre><code class="html">&lt;h1 id=&quot;logo&quot;&gt;Hello World&lt;/h1&gt;
&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;
</code></pre>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>如果您的主题太过于复杂，或是需要生成的文件量太过于庞大，可能会大幅降低性能，除了简化主题外，您可以考虑 Hexo 2.7 新增的局部缓存（Fragment Caching） 功能。</p>
<p>本功能借鉴于 <a href="http://guides.rubyonrails.org/caching_with_rails.html#fragment-caching" target="_blank" rel="external">Ruby on Rails</a>，它储存局部内容，下次便能直接使用缓存内容，可以减少文件夹查询并使生成速度更快。</p>
<p>它可用于页首、页脚、侧边栏等文件不常变动的位置，举例来说：</p>
<pre><code class="js">&lt;%- fragment_cache(&#39;header&#39;, function(){
  return &#39;&lt;header&gt;&lt;/header&gt;&#39;;
});
</code></pre>
<p>如果您使用局部模板的话，可以更简单：</p>
<pre><code class="js">&lt;%- partial(&#39;header&#39;, {}, {cache: true});
</code></pre>
<p>但是，如果您开启了 <code>relative_link</code> 参数的话，请勿使用局部缓存功能，因为相对链接在每个页面可能不同。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;模板决定了网站内容的呈现方式，每个主题至少都应包含一个 &lt;code&gt;index&lt;/code&gt; 模板，以下是各页面相对应的模板名称：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;模板&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;th&gt;回调&lt;/th&gt;
&lt;/tr&gt;
&lt;/th
    
    </summary>
    
      <category term="hexo指南" scheme="http://s.amlove.cn/categories/hexo%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="hexo" scheme="http://s.amlove.cn/tags/hexo/"/>
    
      <category term="hexo指南" scheme="http://s.amlove.cn/tags/hexo%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>服务器</title>
    <link href="http://s.amlove.cn/2017/03/12/hexo/docs/server/"/>
    <id>http://s.amlove.cn/2017/03/12/hexo/docs/server/</id>
    <published>2017-03-12T11:35:02.000Z</published>
    <updated>2017-03-13T12:52:21.686Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hexo-server"><a href="#hexo-server" class="headerlink" title="hexo-server"></a><a href="https://github.com/hexojs/hexo-server" target="_blank" rel="external">hexo-server</a></h2><p>Hexo 3.0 把服务器独立成了个别模块，您必须先安装 <a href="https://github.com/hexojs/hexo-server" target="_blank" rel="external">hexo-server</a> 才能使用。</p>
<pre><code class="bash">$ npm install hexo-server --save
</code></pre>
<p>安装完成后，输入以下命令以启动服务器，您的网站会在 <code>http://localhost:4000</code> 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。</p>
<pre><code class="bash">$ hexo server
</code></pre>
<p>如果您想要更改端口，或是在执行时遇到了 <code>EADDRINUSE</code> 错误，可以在执行时使用 <code>-p</code> 选项指定其他端口，如下：</p>
<pre><code class="bash">$ hexo server -p 5000
</code></pre>
<h3 id="静态模式"><a href="#静态模式" class="headerlink" title="静态模式"></a>静态模式</h3><p>在静态模式下，服务器只处理 <code>public</code> 文件夹内的文件，而不会处理文件变动，在执行时，您应该先自行执行 <code>hexo generate</code>，此模式通常用于生产环境（production mode）下。</p>
<pre><code class="bash">$ hexo server -s
</code></pre>
<h3 id="自定义-IP"><a href="#自定义-IP" class="headerlink" title="自定义 IP"></a>自定义 IP</h3><p>服务器默认运行在 <code>0.0.0.0</code>，您可以覆盖默认的 IP 设置，如下：</p>
<pre><code class="bash">$ hexo server -i 192.168.1.1
</code></pre>
<p>指定这个参数后，您就只能通过该IP才能访问站点。例如，对于一台使用无线网络的笔记本电脑，除了指向本机的<code>127.0.0.1</code>外，通常还有一个<code>192.168.*.*</code>的局域网IP，如果像上面那样使用<code>-i</code>参数，就不能用<code>127.0.0.1</code>来访问站点了。对于有公网IP的主机，如果您指定一个局域网IP作为<code>-i</code>参数的值，那么就无法通过公网来访问站点。</p>
<h2 id="Pow"><a href="#Pow" class="headerlink" title="Pow"></a>Pow</h2><p><a href="http://pow.cx/" target="_blank" rel="external">Pow</a> 是一个 Mac 系统上的零配置 Rack 服务器，它也可以作为一个简单易用的静态文件服务器来使用。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code class="bash">$ curl get.pow.cx | sh
</code></pre>
<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>在 <code>~/.pow</code> 文件夹建立链接（symlink）。</p>
<pre><code class="bash">$ cd ~/.pow
$ ln -s /path/to/myapp
</code></pre>
<p>您的网站将会在 <code>http://myapp.dev</code> 下运行，网址根据链接名称而定。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;hexo-server&quot;&gt;&lt;a href=&quot;#hexo-server&quot; class=&quot;headerlink&quot; title=&quot;hexo-server&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/hexojs/hexo-server&quot; targe
    
    </summary>
    
      <category term="hexo指南" scheme="http://s.amlove.cn/categories/hexo%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="hexo" scheme="http://s.amlove.cn/tags/hexo/"/>
    
      <category term="hexo指南" scheme="http://s.amlove.cn/tags/hexo%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>插件</title>
    <link href="http://s.amlove.cn/2017/03/12/hexo/docs/plugins/"/>
    <id>http://s.amlove.cn/2017/03/12/hexo/docs/plugins/</id>
    <published>2017-03-12T11:35:02.000Z</published>
    <updated>2017-03-13T14:45:31.004Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 有强大的插件系统，使您能轻松扩展功能而不用修改核心模块的源码。在 Hexo 中有两种形式的插件：</p>
<h3 id="脚本（Scripts）"><a href="#脚本（Scripts）" class="headerlink" title="脚本（Scripts）"></a>脚本（Scripts）</h3><p>如果您的代码很简单，建议您编写脚本，您只需要把 JavaScript 文件放到 <code>scripts</code> 文件夹，在启动时就会自动载入。</p>
<h3 id="插件（Packages）"><a href="#插件（Packages）" class="headerlink" title="插件（Packages）"></a>插件（Packages）</h3><p>如果您的代码较复杂，或是您想要发布到 NPM 上，建议您编写插件。首先，在 <code>node_modules</code> 文件夹中建立文件夹，文件夹名称开头必须为 <code>hexo-</code>，如此一来 Hexo 才会在启动时载入否则 Hexo 将会忽略它。</p>
<p>文件夹内至少要包含 2 个文件：一个是主程序，另一个是 <code>package.json</code>，描述插件的用途和所依赖的插件。</p>
<pre><code class="plain">.
├── index.js
└── package.json
</code></pre>
<p><code>package.json</code> 中至少要包含 <code>name</code>, <code>version</code>, <code>main</code> 属性，例如：</p>
<p><code>json package.json
{
  &quot;name&quot;: &quot;hexo-my-plugin&quot;,
  &quot;version&quot;: &quot;0.0.1&quot;,
  &quot;main&quot;: &quot;index&quot;
}</code></p>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>您可以使用 Hexo 提供的官方工具插件来加速开发：</p>
<ul>
<li><a href="https://github.com/hexojs/hexo-fs" target="_blank" rel="external">hexo-fs</a>：文件 IO</li>
<li><a href="https://github.com/hexojs/hexo-util" target="_blank" rel="external">hexo-util</a>：工具程式</li>
<li><a href="https://github.com/hexojs/hexo-i18n" target="_blank" rel="external">hexo-i18n</a>：本地化（i18n）</li>
<li><a href="https://github.com/hexojs/hexo-pagination" target="_blank" rel="external">hexo-pagination</a>：生成分页资料</li>
</ul>
<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>当您完成插件后，可以考虑将它发布到 <a href="https://hexo.io/plugins" target="_blank" rel="external">插件列表</a>，让更多人能够使用您的插件。发布插件的步骤和 <a href="/2017/03/12/hexo/docs/contributing/#更新文档">更新文档</a> 非常类似。</p>
<ol>
<li>Fork <a href="https://github.com/hexojs/site" target="_blank" rel="external">hexojs/site</a></li>
<li><p>把库（repository）复制到电脑上，并安装所依赖的插件。</p>
 <pre><code>$ git clone https:&#x2F;&#x2F;github.com&#x2F;&lt;username&gt;&#x2F;site.git
$ cd site
$ npm install</code></pre>
</li>
<li><p>编辑 <code>source/_data/plugins.yml</code>，在档案中新增您的插件，例如：</p>
 <pre><code>- name: hexo-server
  description: Server module for Hexo.
  link: https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexo-server
  tags:
    - official
    - server
    - console</code></pre>
</li>
<li><p>推送（push）分支。</p>
</li>
<li>建立一个新的合并申请（pull request）并描述改动。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo 有强大的插件系统，使您能轻松扩展功能而不用修改核心模块的源码。在 Hexo 中有两种形式的插件：&lt;/p&gt;
&lt;h3 id=&quot;脚本（Scripts）&quot;&gt;&lt;a href=&quot;#脚本（Scripts）&quot; class=&quot;headerlink&quot; title=&quot;脚本（Script
    
    </summary>
    
      <category term="hexo指南" scheme="http://s.amlove.cn/categories/hexo%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="hexo" scheme="http://s.amlove.cn/tags/hexo/"/>
    
      <category term="hexo指南" scheme="http://s.amlove.cn/tags/hexo%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>迁移</title>
    <link href="http://s.amlove.cn/2017/03/12/hexo/docs/migration/"/>
    <id>http://s.amlove.cn/2017/03/12/hexo/docs/migration/</id>
    <published>2017-03-12T11:35:02.000Z</published>
    <updated>2017-03-13T14:34:34.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h2><p>首先，安装 <code>hexo-migrator-rss</code> 插件。</p>
<pre><code class="bash">$ npm install hexo-migrator-rss --save
</code></pre>
<p>插件安装完成后，执行下列命令，从 RSS 迁移所有文章。<code>source</code> 可以是文件路径或网址。</p>
<pre><code class="bash">$ hexo migrate rss &lt;source&gt;
</code></pre>
<h2 id="Jekyll"><a href="#Jekyll" class="headerlink" title="Jekyll"></a>Jekyll</h2><p>把 <code>_posts</code> 文件夹内的所有文件复制到 <code>source/_posts</code> 文件夹，并在 <code>_config.yml</code> 中修改 <code>new_post_name</code> 参数。</p>
<pre><code class="yaml">new_post_name: :year-:month-:day-:title.md
</code></pre>
<h2 id="Octopress"><a href="#Octopress" class="headerlink" title="Octopress"></a>Octopress</h2><p>把 Octopress <code>source/_posts</code> 文件夹内的所有文件转移到 Hexo 的 <code>source/_posts</code> 文件夹，并修改 <code>_config.yml</code> 中的 <code>new_post_name</code> 参数。</p>
<pre><code class="yaml">new_post_name: :year-:month-:day-:title.md
</code></pre>
<h2 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h2><p>首先，安装 <code>hexo-migrator-wordpress</code> 插件。</p>
<pre><code class="bash">$ npm install hexo-migrator-wordpress --save
</code></pre>
<p>在 WordPress 仪表盘中导出数据(“Tools” → “Export” → “WordPress”)（详情参考<a href="http://en.support.wordpress.com/export/" target="_blank" rel="external">WP支持页面</a>）。</p>
<p>插件安装完成后，执行下列命令来迁移所有文章。<code>source</code> 可以是 WordPress 导出的文件路径或网址。</p>
<pre><code class="bash">$ hexo migrate wordpress &lt;source&gt;
</code></pre>
<blockquote class="note warn"><strong class="note-title">注意</strong><p>这个插件并不能完美地实现WordPress-&gt;Hexo的数据转换，尤其是在处理WordPress的分类方面存在问题（见<a href="/2017/03/12/hexo/docs/front-matter/#分类和标签">Front-matter中的分类与标签</a>。因此，建议您在迁移完成后，手工审阅所有生成的markdown文件，检查其中是否有错误。对于文章数量较大的WordPress站点，这项工作可能要花很长的时间。</p>
</blockquote>
<h2 id="Joomla"><a href="#Joomla" class="headerlink" title="Joomla"></a>Joomla</h2><p>首先，安装 <code>hexo-migrator-joomla</code> 插件。</p>
<pre><code class="bash">$ npm install hexo-migrator-joomla --save
</code></pre>
<p>使用 <a href="http://extensions.joomla.org/extensions/migration-a-conversion/data-import-a-export/12816?qh=YToxOntpOjA7czo1OiJqMnhtbCI7fQ%3D%3D" target="_blank" rel="external">J2XML</a> 组件导出 Joomla 文章。<br>插件安装完成后，执行下列命令来迁移所有文章。<code>source</code> 可以是 Joomla 导出的文件路径或网址。</p>
<pre><code class="bash">$ hexo migrate joomla &lt;source&gt;
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;RSS&quot;&gt;&lt;a href=&quot;#RSS&quot; class=&quot;headerlink&quot; title=&quot;RSS&quot;&gt;&lt;/a&gt;RSS&lt;/h2&gt;&lt;p&gt;首先，安装 &lt;code&gt;hexo-migrator-rss&lt;/code&gt; 插件。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bas
    
    </summary>
    
      <category term="hexo指南" scheme="http://s.amlove.cn/categories/hexo%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="hexo" scheme="http://s.amlove.cn/tags/hexo/"/>
    
      <category term="hexo指南" scheme="http://s.amlove.cn/tags/hexo%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>永久链接（Permalinks）</title>
    <link href="http://s.amlove.cn/2017/03/12/hexo/docs/permalinks/"/>
    <id>http://s.amlove.cn/2017/03/12/hexo/docs/permalinks/</id>
    <published>2017-03-12T11:35:02.000Z</published>
    <updated>2017-03-13T12:52:21.655Z</updated>
    
    <content type="html"><![CDATA[<p>您可以在 <code>_config.yml</code> 配置中调整网站的永久链接或者在每篇文章的 Front-matter 中指定。</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>除了下列变量外，您还可使用 Front-matter 中的所有属性。</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:year</code></td>
<td>文章的发表年份（4 位数）</td>
</tr>
<tr>
<td><code>:month</code></td>
<td>文章的发表月份（2 位数）</td>
</tr>
<tr>
<td><code>:i_month</code></td>
<td>文章的发表月份（去掉开头的零）</td>
</tr>
<tr>
<td><code>:day</code></td>
<td>文章的发表日期 (2 位数)</td>
</tr>
<tr>
<td><code>:i_day</code></td>
<td>文章的发表日期（去掉开头的零）</td>
</tr>
<tr>
<td><code>:title</code></td>
<td>文件名称</td>
</tr>
<tr>
<td><code>:id</code></td>
<td>文章 ID</td>
</tr>
<tr>
<td><code>:category</code></td>
<td>分类。如果文章没有分类，则是 <code>default_category</code> 配置信息。</td>
</tr>
</tbody>
</table>
<p>您可在 <code>permalink_defaults</code> 参数下调整永久链接中各变量的默认值：</p>
<pre><code class="yaml">permalink_defaults:
  lang: en
</code></pre>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>假设 <code>source/_posts</code> 文件夹中有个 <code>hello-world.md</code>，包含以下内容：</p>
<pre><code class="yaml">title: Hello World
date: 2013-07-14 17:01:34
categories:
- foo
- bar
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:year/:month/:day/:title/</code></td>
<td>2013/07/14/hello-world</td>
</tr>
<tr>
<td><code>:year-:month-:day-:title.html</code></td>
<td>2013-07-14-hello-world.html</td>
</tr>
<tr>
<td><code>:category/:title</code></td>
<td>foo/bar/hello-world</td>
</tr>
</tbody>
</table>
<h3 id="多语种支持"><a href="#多语种支持" class="headerlink" title="多语种支持"></a>多语种支持</h3><p>若要建立一个多语种的网站，您可修改 <code>new_post_name</code> 和 <code>permalink</code> 参数，如下：</p>
<pre><code class="yaml">new_post_name: :lang/:title.md
permalink: :lang/:title/
</code></pre>
<p>当您建立新文章时，文章会被储存到：</p>
<pre><code class="bash">$ hexo new &quot;Hello World&quot; --lang tw
# =&gt; source/_posts/tw/Hello-World.md
</code></pre>
<p>而网址会是：</p>
<pre><code class="plain">http://localhost:4000/tw/hello-world/
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;您可以在 &lt;code&gt;_config.yml&lt;/code&gt; 配置中调整网站的永久链接或者在每篇文章的 Front-matter 中指定。&lt;/p&gt;
&lt;h3 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/
    
    </summary>
    
      <category term="hexo指南" scheme="http://s.amlove.cn/categories/hexo%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="hexo" scheme="http://s.amlove.cn/tags/hexo/"/>
    
      <category term="hexo指南" scheme="http://s.amlove.cn/tags/hexo%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>生成器（Generator）</title>
    <link href="http://s.amlove.cn/2017/03/12/hexo/api/generator/"/>
    <id>http://s.amlove.cn/2017/03/12/hexo/api/generator/</id>
    <published>2017-03-12T11:35:02.000Z</published>
    <updated>2017-03-13T14:12:36.297Z</updated>
    
    <content type="html"><![CDATA[<p>生成器根据处理后的原始文件建立路由。</p>
<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><pre><code class="js">hexo.extend.generator.register(name, function(locals){
});
</code></pre>
<p>在函数中会传入一个 <code>locals</code> 参数，等同于 <a href="/2017/03/12/hexo/docs/variables/#网站变量">网站变量</a>，请尽量利用此参数取得网站数据，避免直接存取资料库。</p>
<h2 id="更新路由"><a href="#更新路由" class="headerlink" title="更新路由"></a>更新路由</h2><pre><code class="js">hexo.extend.generator.register(&#39;test&#39;, function(locals){
  // Object
  return {
    path: &#39;foo&#39;,
    data: &#39;foo&#39;
  };

  // Array
  return [
    {path: &#39;foo&#39;, data: &#39;foo&#39;},
    {path: &#39;bar&#39;, data: &#39;bar&#39;}
  ];
});
</code></pre>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>path</code></td>
<td>路径。不可包含开头的 <code>/</code>。</td>
</tr>
<tr>
<td><code>data</code></td>
<td>数据</td>
</tr>
<tr>
<td><code>layout</code></td>
<td>布局。指定用于渲染的模板，可为字符串或数组，如果省略此属性的话则会直接输出 <code>data</code>。</td>
</tr>
</tbody>
</table>
<p>在原始文件更新时，Hexo 会执行所有生成器并重建路由，<strong>请直接回传资料，不要直接操作路由</strong>。</p>
<h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><h3 id="归档页面"><a href="#归档页面" class="headerlink" title="归档页面"></a>归档页面</h3><p>在 <code>archives/index.html</code> 建立一归档页面，把所有文章当作资料传入模板内，这个资料也就等同于模板中的 <code>page</code> 变量。</p>
<p>然后，设置 <code>layout</code> 属性好让 Hexo 使用主题模板来渲染，在此例中同时设定了两个布局，当 <code>archive</code> 布局不存在时，会继续尝试 <code>index</code> 布局。</p>
<pre><code class="js">hexo.extend.generator.register(&#39;archive&#39;, function(locals){
  return {
    path: &#39;archives/index.html&#39;,
    data: locals.posts,
    layout: [&#39;archive&#39;, &#39;index&#39;]
  }
});
</code></pre>
<h3 id="有分页的归档页面"><a href="#有分页的归档页面" class="headerlink" title="有分页的归档页面"></a>有分页的归档页面</h3><p>您可以通过 <a href="https://github.com/hexojs/hexo-pagination" target="_blank" rel="external">hexo-pagination</a> 这个方便的官方工具来轻松建立分页归档。</p>
<pre><code class="js">var pagination = require(&#39;hexo-pagination&#39;);

hexo.extend.generator.register(&#39;archive&#39;, function(locals){
  return pagination(&#39;archives/index.html&#39;, locals.posts, {
    perPage: 10,
    layout: [&#39;archive&#39;, &#39;index&#39;],
    data: {}
  });
});
</code></pre>
<h3 id="生成所有文章"><a href="#生成所有文章" class="headerlink" title="生成所有文章"></a>生成所有文章</h3><p>遍历 <code>locals.posts</code> 中的所有文章并生成所有文章的路由。</p>
<pre><code class="js">hexo.extend.generator.register(&#39;post&#39;, function(locals){
  return locals.posts.map(function(post){
    return {
      path: post.path,
      data: post,
      layout: &#39;post&#39;
    };
  });
});
</code></pre>
<h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><p>这次不直接在 <code>data</code> 中返回数据而是返回一个函数，如此一来这个路由唯有在使用时才会建立 <code>fs.ReadStream</code>。</p>
<pre><code class="js">var fs = require(&#39;hexo-fs&#39;);

hexo.extend.generator.register(&#39;asset&#39;, function(locals){
  return {
    path: &#39;file.txt&#39;,
    data: function(){
      return fs.createReadStream(&#39;path/to/file.txt&#39;)
    }
  };
});
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;生成器根据处理后的原始文件建立路由。&lt;/p&gt;
&lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;js&quot;&gt;hexo.extend.generator.reg
    
    </summary>
    
      <category term="hexo接口" scheme="http://s.amlove.cn/categories/hexo%E6%8E%A5%E5%8F%A3/"/>
    
    
      <category term="hexo" scheme="http://s.amlove.cn/tags/hexo/"/>
    
      <category term="hexo接口" scheme="http://s.amlove.cn/tags/hexo%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>国际化（i18n）</title>
    <link href="http://s.amlove.cn/2017/03/12/hexo/docs/internationalization/"/>
    <id>http://s.amlove.cn/2017/03/12/hexo/docs/internationalization/</id>
    <published>2017-03-12T11:35:02.000Z</published>
    <updated>2017-03-13T12:52:21.608Z</updated>
    
    <content type="html"><![CDATA[<p>若要让您的网站以不同语言呈现，您可使用国际化（internationalization）功能。请先在 <code>_config.yml</code> 中调整 <code>language</code> 设定，这代表的是预设语言，您也可设定多个语言来调整预设语言的顺位。</p>
<pre><code class="yaml">language: zh-tw

language: 
- zh-tw
- en
</code></pre>
<h3 id="语言文件"><a href="#语言文件" class="headerlink" title="语言文件"></a>语言文件</h3><p>语言文件可以使用 YAML 或 JSON 编写，并放在主题文件夹中的 <code>languages</code> 文件夹。您可以在语言文件中使用 <a href="https://github.com/alexei/sprintf.js" target="_blank" rel="external">printf 格式</a>。</p>
<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>在模板中，透过 <code>__</code> 或 <code>_p</code> 辅助函数，即可取得翻译后的字符串，前者用于一般使用；而后者用于复数字符串。例如：</p>
<p>``` yaml en.yml<br>index:<br>  title: Home<br>  add: Add<br>  video:<br>    zero: No videos<br>    one: One video<br>    other: %d videos</p>
<pre><code>
``` js
&lt;%= __(&#39;index.title&#39;) %&gt;
// Home

&lt;%= _p(&#39;index.video&#39;, 3) %&gt;
// 3 videos
</code></pre><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>您可在 front-matter 中指定该页面的语言，也可在 <code>_config.yml</code> 中修改 <code>i18n_dir</code> 设定，让 Hexo 自动侦测。</p>
<pre><code class="yaml">i18n_dir: :lang
</code></pre>
<p><code>i18n_dir</code> 的预设值是 <code>:lang</code>，也就是说 Hexo 会捕获网址中的第一段以检测语言，举例来说：</p>
<pre><code class="plain">/index.html =&gt; en
/archives/index.html =&gt; en
/zh-tw/index.html =&gt; zh-tw
</code></pre>
<p>捕获到的字符串唯有在语言文件存在的情况下，才会被当作是语言，因此例二 <code>/archives/index.html</code> 中的 <code>archives</code> 就不被当成是语言。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;若要让您的网站以不同语言呈现，您可使用国际化（internationalization）功能。请先在 &lt;code&gt;_config.yml&lt;/code&gt; 中调整 &lt;code&gt;language&lt;/code&gt; 设定，这代表的是预设语言，您也可设定多个语言来调整预设语言的顺位。&lt;/
    
    </summary>
    
      <category term="hexo指南" scheme="http://s.amlove.cn/categories/hexo%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="hexo" scheme="http://s.amlove.cn/tags/hexo/"/>
    
      <category term="hexo指南" scheme="http://s.amlove.cn/tags/hexo%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 指南</title>
    <link href="http://s.amlove.cn/2017/03/12/hexo/docs/hexo%E6%8C%87%E5%8D%97/"/>
    <id>http://s.amlove.cn/2017/03/12/hexo/docs/hexo指南/</id>
    <published>2017-03-12T11:35:02.000Z</published>
    <updated>2017-03-13T13:34:05.255Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><a href="/2017/03/12/hexo/docs/index/" title="文档">文档</a></li>
<li><a href="/2017/03/12/hexo/docs/setup/" title="建站">建站</a></li>
<li><a href="/2017/03/12/hexo/docs/configuration/" title="配置">配置</a></li>
<li><a href="/2017/03/12/hexo/docs/commands/" title="指令">指令</a></li>
<li><a href="/2017/03/12/hexo/docs/migration/" title="迁移">迁移</a></li>
<li><a href="/2017/03/12/hexo/docs/writing/" title="写作">写作</a></li>
<li><a href="/2017/03/12/hexo/docs/front-matter/" title="Front-matter">Front-matter</a></li>
<li><a href="/2017/03/12/hexo/docs/tag-plugins/" title="标签插件（Tag Plugins）">标签插件（Tag Plugins）</a></li>
<li><a href="/2017/03/12/hexo/docs/asset-folders/" title="资源文件夹">资源文件夹</a></li>
<li><a href="/2017/03/12/hexo/docs/data-files/" title="数据文件">数据文件</a></li>
<li><a href="/2017/03/12/hexo/docs/server/" title="服务器">服务器</a></li>
<li><a href="/2017/03/12/hexo/docs/generating/" title="生成文件">生成文件</a></li>
<li><a href="/2017/03/12/hexo/docs/deployment/" title="部署">部署</a></li>
<li><a href="/2017/03/12/hexo/docs/permalinks/" title="永久链接（Permalinks）">永久链接（Permalinks）</a></li>
<li><a href="/2017/03/12/hexo/docs/themes/" title="主题">主题</a></li>
<li><a href="/2017/03/12/hexo/docs/templates/" title="模版">模版</a></li>
<li><a href="/2017/03/12/hexo/docs/variables/" title="变量">变量</a></li>
<li><a href="/2017/03/12/hexo/docs/helpers/" title="辅助函数（Helpers）">辅助函数（Helpers）</a></li>
<li><a href="/2017/03/12/hexo/docs/internationalization/" title="国际化（i18n）">国际化（i18n）</a></li>
<li><a href="/2017/03/12/hexo/docs/plugins/" title="插件">插件</a></li>
<li><a href="/2017/03/12/hexo/docs/troubleshooting/" title="问题解答">问题解答</a></li>
<li><a href="/2017/03/12/hexo/docs/contributing/" title="贡献">贡献</a>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/12/hexo/docs/index/&quot; title=&quot;文档&quot;&gt;文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/12/hexo/docs/setup/&quot; title=&quot;建站&quot;&gt;建站&lt;/a&gt;&lt;/li&gt;
&lt;li
    
    </summary>
    
      <category term="hexo指南" scheme="http://s.amlove.cn/categories/hexo%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="hexo" scheme="http://s.amlove.cn/tags/hexo/"/>
    
      <category term="hexo指南" scheme="http://s.amlove.cn/tags/hexo%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>辅助函数（Helpers）</title>
    <link href="http://s.amlove.cn/2017/03/12/hexo/docs/helpers/"/>
    <id>http://s.amlove.cn/2017/03/12/hexo/docs/helpers/</id>
    <published>2017-03-12T11:35:02.000Z</published>
    <updated>2017-03-13T12:52:21.608Z</updated>
    
    <content type="html"><![CDATA[<p>辅助函数帮助您在模版中快速插入内容。辅助函数不能在源文件中使用。</p>
<h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><h3 id="url-for"><a href="#url-for" class="headerlink" title="url_for"></a>url_for</h3><p>在路径前加上根路径，从 Hexo 2.7 开始您应该使用此函数而不是 <code>config.root + path</code>。</p>
<pre><code class="js">&lt;%- url_for(path) %&gt;
</code></pre>
<h3 id="relative-url"><a href="#relative-url" class="headerlink" title="relative_url"></a>relative_url</h3><p>取得与 <code>from</code> 相对的 <code>to</code> 路径。</p>
<pre><code class="js">&lt;%- relative_url(from, to) %&gt;
</code></pre>
<h3 id="gravatar"><a href="#gravatar" class="headerlink" title="gravatar"></a>gravatar</h3><p>插入 Gravatar 图片。<br>如果你不指定 <code>options</code> 参数，将会应用默认参数。否则，你可以将其设置为一个数字，这个数字将会作为 Gravatar 的大小参数。最后，如果你设置它一个对象，它将会被转换为 Gravatar 的一个查询字符串参数。</p>
<pre><code class="js">&lt;%- gravatar(email, [options]);
</code></pre>
<p><strong>示例：</strong></p>
<pre><code class="js">&lt;%- gravatar(&#39;a@abc.com&#39;) %&gt;
// http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787

&lt;%- gravatar(&#39;a@abc.com&#39;, 40) %&gt;
// http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40

&lt;%- gravatar(&#39;a@abc.com&#39; {s: 40, d: &#39;http://example.com/image.png&#39;}) %&gt;
// http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40&amp;d=http%3A%2F%2Fexample.com%2Fimage.png
</code></pre>
<h2 id="HTML-标签"><a href="#HTML-标签" class="headerlink" title="HTML 标签"></a>HTML 标签</h2><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><p>载入 CSS 文件。<code>path</code> 可以是数组或字符串，如果 <code>path</code> 开头不是 <code>/</code> 或任何协议，则会自动加上根路径；如果后面没有加上 <code>.css</code> 扩展名的话，也会自动加上。</p>
<pre><code class="js">&lt;%- css(path, ...) %&gt;
</code></pre>
<p><strong>示例：</strong></p>
<pre><code class="js">&lt;%- css(&#39;style.css&#39;) %&gt;
// &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot; type=&quot;text/css&quot;&gt;

&lt;%- css([&#39;style.css&#39;, &#39;screen.css&#39;]) %&gt;
// &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot; type=&quot;text/css&quot;&gt;
// &lt;link rel=&quot;stylesheet&quot; href=&quot;/screen.css&quot; type=&quot;text/css&quot;&gt;
</code></pre>
<h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><p>载入 JavaScript 文件。<code>path</code> 可以是数组或字符串，如果 <code>path</code> 开头不是 <code>/</code> 或任何协议，则会自动加上根路径；如果后面没有加上 <code>.js</code> 扩展名的话，也会自动加上。</p>
<pre><code class="js">&lt;%- js(path, ...) %&gt;
</code></pre>
<p><strong>示例：</strong></p>
<pre><code class="js">&lt;%- js(&#39;script.js&#39;) %&gt;
// &lt;script type=&quot;text/javascript&quot; src=&quot;/script.js&quot;&gt;&lt;/script&gt;

&lt;%- js([&#39;script.js&#39;, &#39;gallery.js&#39;]) %&gt;
// &lt;script type=&quot;text/javascript&quot; src=&quot;/script.js&quot;&gt;&lt;/script&gt;
// &lt;script type=&quot;text/javascript&quot; src=&quot;/gallery.js&quot;&gt;&lt;/script&gt;
</code></pre>
<h3 id="link-to"><a href="#link-to" class="headerlink" title="link_to"></a>link_to</h3><p>插入链接。</p>
<pre><code class="js">&lt;%- link_to(path, [text], [options]) %&gt;
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>external</code></td>
<td>在新视窗打开链接</td>
<td>false</td>
</tr>
<tr>
<td><code>class</code></td>
<td>Class 名称</td>
<td></td>
</tr>
<tr>
<td><code>id</code></td>
<td>ID</td>
<td></td>
</tr>
</tbody>
</table>
<p><strong>示例：</strong></p>
<pre><code class="js">&lt;%- link_to(&#39;http://www.google.com&#39;) %&gt;
// &lt;a href=&quot;http://www.google.com&quot; title=&quot;http://www.google.com&quot;&gt;http://www.google.com&lt;/a&gt;

&lt;%- link_to(&#39;http://www.google.com&#39;, &#39;Google&#39;) %&gt;
// &lt;a href=&quot;http://www.google.com&quot; title=&quot;Google&quot;&gt;Google&lt;/a&gt;

&lt;%- link_to(&#39;http://www.google.com&#39;, &#39;Google&#39;, {external: true}) %&gt;
// &lt;a href=&quot;http://www.google.com&quot; title=&quot;Google&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google&lt;/a&gt;
</code></pre>
<h3 id="mail-to"><a href="#mail-to" class="headerlink" title="mail_to"></a>mail_to</h3><p>插入电子邮箱链接。</p>
<pre><code class="js">&lt;%- mail_to(path, [text], [options]) %&gt;
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>class</code></td>
<td>Class 名称</td>
</tr>
<tr>
<td><code>id</code></td>
<td>ID</td>
</tr>
<tr>
<td><code>subject</code></td>
<td>邮件主题</td>
</tr>
<tr>
<td><code>cc</code></td>
<td>抄送（CC）</td>
</tr>
<tr>
<td><code>bcc</code></td>
<td>密送（BCC）</td>
</tr>
<tr>
<td><code>body</code></td>
<td>邮件内容</td>
</tr>
</tbody>
</table>
<p><strong>示例：</strong></p>
<pre><code class="js">&lt;%- mail_to(&#39;a@abc.com&#39;) %&gt;
// &lt;a href=&quot;mailto:a@abc.com&quot; title=&quot;a@abc.com&quot;&gt;a@abc.com&lt;/a&gt;

&lt;%- mail_to(&#39;a@abc.com&#39;, &#39;Email&#39;) %&gt;
// &lt;a href=&quot;mailto:a@abc.com&quot; title=&quot;Email&quot;&gt;Email&lt;/a&gt;
</code></pre>
<h3 id="image-tag"><a href="#image-tag" class="headerlink" title="image_tag"></a>image_tag</h3><p>插入图片。</p>
<pre><code class="js">&lt;%- image_tag(path, [options]) %&gt;
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>alt</code></td>
<td>图片的替代文字</td>
</tr>
<tr>
<td><code>class</code></td>
<td>Class 名称</td>
</tr>
<tr>
<td><code>id</code></td>
<td>ID</td>
</tr>
<tr>
<td><code>width</code></td>
<td>图片宽度</td>
</tr>
<tr>
<td><code>height</code></td>
<td>图片高度</td>
</tr>
</tbody>
</table>
<h3 id="favicon-tag"><a href="#favicon-tag" class="headerlink" title="favicon_tag"></a>favicon_tag</h3><p>插入 favicon。</p>
<pre><code class="js">&lt;%- favicon_tag(path) %&gt;
</code></pre>
<h3 id="feed-tag"><a href="#feed-tag" class="headerlink" title="feed_tag"></a>feed_tag</h3><p>插入 feed 链接。</p>
<pre><code class="js">&lt;%- feed_tag(path, [options]) %&gt;
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>title</code></td>
<td>Feed 标题</td>
<td></td>
</tr>
<tr>
<td><code>type</code></td>
<td>Feed 类型</td>
<td>atom</td>
</tr>
</tbody>
</table>
<h2 id="条件函数"><a href="#条件函数" class="headerlink" title="条件函数"></a>条件函数</h2><h3 id="is-current"><a href="#is-current" class="headerlink" title="is_current"></a>is_current</h3><p>检查 <code>path</code> 是否符合目前页面的网址。开启 <code>strict</code> 选项启用严格比对。</p>
<pre><code class="js">&lt;%- is_current(path, [strict]) %&gt;
</code></pre>
<h3 id="is-home"><a href="#is-home" class="headerlink" title="is_home"></a>is_home</h3><p>检查目前是否为首页。</p>
<pre><code class="js">&lt;%- is_home() %&gt;
</code></pre>
<h3 id="is-post"><a href="#is-post" class="headerlink" title="is_post"></a>is_post</h3><p>检查目前是否为文章。</p>
<pre><code class="js">&lt;%- is_post() %&gt;
</code></pre>
<h3 id="is-archive"><a href="#is-archive" class="headerlink" title="is_archive"></a>is_archive</h3><p>检查目前是否为存档页面。</p>
<pre><code class="js">&lt;%- is_archive() %&gt;
</code></pre>
<h3 id="is-year"><a href="#is-year" class="headerlink" title="is_year"></a>is_year</h3><p>检查目前是否为年度归档页面。</p>
<pre><code class="js">&lt;%- is_year() %&gt;
</code></pre>
<h3 id="is-month"><a href="#is-month" class="headerlink" title="is_month"></a>is_month</h3><p>检查目前是否为月度归档页面。</p>
<pre><code class="js">&lt;%- is_month() %&gt;
</code></pre>
<h3 id="is-category"><a href="#is-category" class="headerlink" title="is_category"></a>is_category</h3><p>检查目前是否为分类归档页面。<br>如果给定一个字符串作为参数，将会检查目前是否为指定分类。</p>
<pre><code class="js">&lt;%- is_category() %&gt;
&lt;%- is_category(&#39;hobby&#39;) %&gt;
</code></pre>
<h3 id="is-tag"><a href="#is-tag" class="headerlink" title="is_tag"></a>is_tag</h3><p>检查目前是否为标签归档页面。<br>如果给定一个字符串作为参数，将会检查目前是否为指定标签。</p>
<pre><code class="js">&lt;%- is_tag() %&gt;
&lt;%- is_tag(&#39;hobby&#39;) %&gt;
</code></pre>
<h2 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h2><h3 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h3><p>清除字符串开头和结尾的空格。</p>
<pre><code class="js">&lt;%- trim(string) %&gt;
</code></pre>
<h3 id="strip-html"><a href="#strip-html" class="headerlink" title="strip_html"></a>strip_html</h3><p>清除字符串中的 HTML 标签。</p>
<pre><code class="js">&lt;%- strip_html(string) %&gt;
</code></pre>
<p><strong>示例：</strong></p>
<pre><code class="js">&lt;%- strip_html(&#39;It&#39;s not &lt;b&gt;important&lt;/b&gt; anymore!&#39;) %&gt;
// It&#39;s not important anymore!
</code></pre>
<h3 id="titlecase"><a href="#titlecase" class="headerlink" title="titlecase"></a>titlecase</h3><p>把字符串转换为正确的 Title case。</p>
<pre><code class="js">&lt;%- titlecase(string) %&gt;
</code></pre>
<p><strong>示例：</strong></p>
<pre><code class="js">&lt;%- titlecase(&#39;this is an apple&#39;) %&gt;
# This is an Apple
</code></pre>
<h3 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h3><p>使用 Markdown 解析字符串。</p>
<pre><code class="js">&lt;%- markdown(str) %&gt;
</code></pre>
<p><strong>示例：</strong></p>
<pre><code class="js">&lt;%- markdown(&#39;make me **strong**&#39;) %&gt;
// make me &lt;strong&gt;strong&lt;/strong&gt;
</code></pre>
<h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p>解析字符串。</p>
<pre><code class="js">&lt;%- render(str, engine, [options]) %&gt;
</code></pre>
<h3 id="word-wrap"><a href="#word-wrap" class="headerlink" title="word_wrap"></a>word_wrap</h3><p>使每行的字符串长度不超过 <code>length</code>。<code>length</code> 预设为 80。</p>
<pre><code class="js">&lt;%- word_wrap(str, [length]) %&gt;
</code></pre>
<p><strong>示例：</strong></p>
<pre><code class="js">&lt;%- word_wrap(&#39;Once upon a time&#39;, 8) %&gt;
// Once upon\n a time
</code></pre>
<h3 id="truncate"><a href="#truncate" class="headerlink" title="truncate"></a>truncate</h3><p>移除超过 <code>length</code> 长度的字符串。</p>
<pre><code class="js">&lt;%- truncate(text, length) %&gt;
</code></pre>
<p><strong>示例：</strong></p>
<pre><code class="js">&lt;%- truncate(&#39;Once upon a time in a world far far away&#39;, {length: 17}) %&gt;
// Once upon a ti...

&lt;%- truncate(&#39;Once upon a time in a world far far away&#39;, {length: 17, separator: &#39; &#39;}) %&gt;
// Once upon a...

&lt;%- truncate(&#39;And they found that many people were sleeping better.&#39;, {length: 25, omission: &#39;... (continued)&#39;}) %&gt;
// And they f... (continued)
</code></pre>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><h3 id="partial"><a href="#partial" class="headerlink" title="partial"></a>partial</h3><p>载入其他模板文件，您可在 <code>locals</code> 设定区域变量。</p>
<pre><code class="js">&lt;%- partial(layout, [locals], [options]) %&gt;
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>cache</code></td>
<td>缓存（使用 Fragment cache）</td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>only</code></td>
<td>限制局部变量。在模板中只能使用 <code>locals</code> 中设定的变量。</td>
<td><code>false</code></td>
</tr>
</tbody>
</table>
<h3 id="fragment-cache"><a href="#fragment-cache" class="headerlink" title="fragment_cache"></a>fragment_cache</h3><p>局部缓存。它储存局部内容，下次使用时就能直接使用缓存。</p>
<pre><code class="js">&lt;%- fragment_cache(id, fn);
</code></pre>
<p><strong>示例：</strong></p>
<pre><code class="js">&lt;%- fragment_cache(&#39;header&#39;, function(){
  return &#39;&lt;header&gt;&lt;/header&gt;&#39;;
}) %&gt;
</code></pre>
<h2 id="日期与时间"><a href="#日期与时间" class="headerlink" title="日期与时间"></a>日期与时间</h2><h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><p>插入格式化的日期。<code>date</code> 可以是 UNIX 时间、ISO 字符串、Date 对象或 <a href="http://momentjs.com/" target="_blank" rel="external">Moment.js</a> 对象。<code>format</code> 默认为 <code>date_format</code> 配置信息。</p>
<pre><code class="js">&lt;%- date(date, [format]) %&gt;
</code></pre>
<p><strong>示例：</strong></p>
<pre><code class="js">&lt;%- date(Date.now()) %&gt;
// 2013-01-01

&lt;%- date(Date.now(), &#39;YYYY/M/D&#39;) %&gt;
// Jan 1 2013
</code></pre>
<h3 id="date-xml"><a href="#date-xml" class="headerlink" title="date_xml"></a>date_xml</h3><p>插入 XML 格式的日期。<code>date</code> 可以是 UNIX 时间、ISO 字符串、Date 对象或 <a href="http://momentjs.com/" target="_blank" rel="external">Moment.js</a> 对象。</p>
<pre><code class="js">&lt;%- date_xml(date) %&gt;
</code></pre>
<p><strong>示例：</strong></p>
<pre><code class="js">&lt;%- date_xml(Date.now()) %&gt;
// 2013-01-01T00:00:00.000Z
</code></pre>
<h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><p>插入格式化的时间。<code>date</code> 可以是 UNIX 时间、ISO 字符串、Date 对象或 <a href="http://momentjs.com/" target="_blank" rel="external">Moment.js</a> 对象。<code>format</code> 默认为 <code>time_format</code> 配置信息。</p>
<pre><code class="js">&lt;%- time(date, [format]) %&gt;
</code></pre>
<p><strong>示例：</strong></p>
<pre><code class="js">&lt;%- time(Date.now()) %&gt;
// 13:05:12

&lt;%- time(Date.now(), &#39;h:mm:ss a&#39;) %&gt;
// 1:05:12 pm
</code></pre>
<h3 id="full-date"><a href="#full-date" class="headerlink" title="full_date"></a>full_date</h3><p>插入格式化的日期和时间。<code>date</code> 可以是 UNIX 时间、ISO 字符串、Date 对象或 <a href="http://momentjs.com/" target="_blank" rel="external">Moment.js</a> 对象。<code>format</code> 默认为 <code>date_format + time_format</code>。</p>
<pre><code class="js">&lt;%- full_date(date, [format]) %&gt;
</code></pre>
<p><strong>示例：</strong></p>
<pre><code class="js">&lt;%- full_date(new Date()) %&gt;
// Jan 1, 2013 0:00:00

&lt;%- full_date(new Date(), &#39;dddd, MMMM Do YYYY, h:mm:ss a&#39;) %&gt;
// Tuesday, January 1st 2013, 12:00:00 am
</code></pre>
<h3 id="moment"><a href="#moment" class="headerlink" title="moment"></a>moment</h3><p><a href="http://momentjs.com/" target="_blank" rel="external">Moment.js</a> 函数库。</p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="list-categories"><a href="#list-categories" class="headerlink" title="list_categories"></a>list_categories</h3><p>插入分类列表。</p>
<pre><code class="js">&lt;%- list_categories([options]) %&gt;
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>orderby</code></td>
<td>分类排列方式</td>
<td>name</td>
</tr>
<tr>
<td><code>order</code></td>
<td>分类排列顺序。<code>1</code>, <code>asc</code> 升序；<code>-1</code>, <code>desc</code> 降序。</td>
<td>1</td>
</tr>
<tr>
<td><code>show_count</code></td>
<td>显示每个分类的文章总数</td>
<td>true</td>
</tr>
<tr>
<td><code>style</code></td>
<td>分类列表的显示方式。使用 <code>list</code> 以无序列表（unordered list）方式显示。</td>
<td>list</td>
</tr>
<tr>
<td><code>separator</code></td>
<td>分类间的分隔符号。只有在 <code>style</code> 不是 <code>list</code> 时有用。</td>
<td>,</td>
</tr>
<tr>
<td><code>depth</code></td>
<td>要显示的分类层级。<code>0</code> 显示所有层级的分类；<code>-1</code> 和 <code>0</code> 很类似，但是显示不分层级；<code>1</code> 只显示第一层的分类。</td>
<td>0</td>
</tr>
<tr>
<td><code>class</code></td>
<td>分类列表的 class 名称。</td>
<td>category</td>
</tr>
<tr>
<td><code>transform</code></td>
<td>改变分类名称显示方法的函数</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="list-tags"><a href="#list-tags" class="headerlink" title="list_tags"></a>list_tags</h3><p>插入标签列表。</p>
<pre><code class="js">&lt;%- list_tags([options]) %&gt;
</code></pre>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
<th>预设值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>orderby</code></td>
<td>标签排列方式</td>
<td>name</td>
</tr>
<tr>
<td><code>order</code></td>
<td>标签排列顺序。<code>1</code>, <code>asc</code> 升序；<code>-1</code>, <code>desc</code> 降序。</td>
<td>1</td>
</tr>
<tr>
<td><code>show_count</code></td>
<td>显示每个标签的文章总数</td>
<td>true</td>
</tr>
<tr>
<td><code>style</code></td>
<td>标签列表的显示方式。使用 <code>list</code> 以无序列表（unordered list）方式显示。</td>
<td>list</td>
</tr>
<tr>
<td><code>separator</code></td>
<td>标签间的分隔符号。只有在 <code>style</code> 不是 <code>list</code> 时有用。</td>
<td>,</td>
</tr>
<tr>
<td><code>class</code></td>
<td>标签列表的 class 名称。</td>
<td>tag</td>
</tr>
<tr>
<td><code>transform</code></td>
<td>改变标签名称显示方法的函数</td>
<td></td>
</tr>
<tr>
<td><code>amount</code></td>
<td>要显示的标签数量（0 = 无限制）</td>
<td>0</td>
</tr>
</tbody>
</table>
<h3 id="list-archives"><a href="#list-archives" class="headerlink" title="list_archives"></a>list_archives</h3><p>插入归档列表。</p>
<pre><code class="js">&lt;%- list_archives([options]) %&gt;
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>type</code></td>
<td>类型。此设定可为 <code>yearly</code> 或 <code>monthly</code>。</td>
<td>monthly</td>
</tr>
<tr>
<td><code>order</code></td>
<td>排列顺序。<code>1</code>, <code>asc</code> 升序；<code>-1</code>, <code>desc</code> 降序。</td>
<td>1</td>
</tr>
<tr>
<td><code>show_count</code></td>
<td>显示每个归档的文章总数</td>
<td>true</td>
</tr>
<tr>
<td><code>format</code></td>
<td>日期格式</td>
<td>MMMM YYYY</td>
</tr>
<tr>
<td><code>style</code></td>
<td>归档列表的显示方式。使用 <code>list</code> 以无序列表（unordered list）方式显示。</td>
<td>list</td>
</tr>
<tr>
<td><code>separator</code></td>
<td>归档间的分隔符号。只有在 <code>style</code> 不是 <code>list</code> 时有用。</td>
<td>,</td>
</tr>
<tr>
<td><code>class</code></td>
<td>归档列表的 class 名称。</td>
<td>archive</td>
</tr>
<tr>
<td><code>transform</code></td>
<td>改变归档名称显示方法的函数</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="list-posts"><a href="#list-posts" class="headerlink" title="list_posts"></a>list_posts</h3><p>插入文章列表。</p>
<pre><code class="js">&lt;%- list_posts([options]) %&gt;
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>orderby</code></td>
<td>文章排列方式</td>
<td>date</td>
</tr>
<tr>
<td><code>order</code></td>
<td>文章排列顺序。<code>1</code>, <code>asc</code> 升序；<code>-1</code>, <code>desc</code> 降序。</td>
<td>-1</td>
</tr>
<tr>
<td><code>style</code></td>
<td>文章列表的显示方式。使用 <code>list</code> 以无序列表（unordered list）方式显示。</td>
<td>list</td>
</tr>
<tr>
<td><code>separator</code></td>
<td>文章间的分隔符号。只有在 <code>style</code> 不是 <code>list</code> 时有用。</td>
<td>,</td>
</tr>
<tr>
<td><code>class</code></td>
<td>文章列表的 class 名称。</td>
<td>post</td>
</tr>
<tr>
<td><code>amount</code></td>
<td>要显示的文章数量（0 = 无限制）</td>
<td>6</td>
</tr>
<tr>
<td><code>transform</code></td>
<td>改变文章名称显示方法的函数</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="tagcloud"><a href="#tagcloud" class="headerlink" title="tagcloud"></a>tagcloud</h3><p>插入标签云。</p>
<pre><code class="js">&lt;%- tagcloud([tags], [options]) %&gt;
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>min_font</code></td>
<td>最小字体尺寸</td>
<td>10</td>
</tr>
<tr>
<td><code>max_font</code></td>
<td>最大字体尺寸</td>
<td>20</td>
</tr>
<tr>
<td><code>unit</code></td>
<td>字体尺寸的单位</td>
<td>px</td>
</tr>
<tr>
<td><code>amount</code></td>
<td>标签总量</td>
<td>40</td>
</tr>
<tr>
<td><code>orderby</code></td>
<td>标签排列方式</td>
<td>name</td>
</tr>
<tr>
<td><code>order</code></td>
<td>标签排列顺序。<code>1</code>, <code>sac</code> 升序；<code>-1</code>, <code>desc</code> 降序</td>
<td>1</td>
</tr>
<tr>
<td><code>color</code></td>
<td>使用颜色</td>
<td>false</td>
</tr>
<tr>
<td><code>start_color</code></td>
<td>开始的颜色。您可使用十六进位值（<code>#b700ff</code>），rgba（<code>rgba(183, 0, 255, 1)</code>），hsla（<code>hsla(283, 100%, 50%, 1)</code>）或 <a href="http://www.w3.org/TR/css3-color/#svg-color" target="_blank" rel="external">颜色关键字</a>。此变量仅在 <code>color</code> 参数开启时才有用。</td>
<td></td>
</tr>
<tr>
<td><code>end_color</code></td>
<td>结束的颜色。您可使用十六进位值（<code>#b700ff</code>），rgba（<code>rgba(183, 0, 255, 1)</code>），hsla（<code>hsla(283, 100%, 50%, 1)</code>）或 <a href="http://www.w3.org/TR/css3-color/#svg-color" target="_blank" rel="external">颜色关键字</a>。此变量仅在 <code>color</code> 参数开启时才有用。</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="paginator"><a href="#paginator" class="headerlink" title="paginator"></a>paginator</h3><p>插入分页链接。</p>
<pre><code class="js">&lt;%- paginator(options) %&gt;
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>base</code></td>
<td>基础网址</td>
<td>/</td>
</tr>
<tr>
<td><code>format</code></td>
<td>网址格式</td>
<td>page/%d/</td>
</tr>
<tr>
<td><code>total</code></td>
<td>分页总数</td>
<td>1</td>
</tr>
<tr>
<td><code>current</code></td>
<td>目前页数</td>
<td>0</td>
</tr>
<tr>
<td><code>prev_text</code></td>
<td>上一页链接的文字。仅在 <code>prev_next</code> 设定开启时才有用。</td>
<td>Prev</td>
</tr>
<tr>
<td><code>next_text</code></td>
<td>下一页链接的文字。仅在 <code>prev_next</code> 设定开启时才有用。</td>
<td>Next</td>
</tr>
<tr>
<td><code>space</code></td>
<td>空白文字</td>
<td>&hellip;</td>
</tr>
<tr>
<td><code>prev_next</code></td>
<td>显示上一页和下一页的链接</td>
<td>true</td>
</tr>
<tr>
<td><code>end_size</code></td>
<td>显示于两侧的页数</td>
<td>1</td>
</tr>
<tr>
<td><code>mid_size</code></td>
<td>显示于中间的页数</td>
<td>2</td>
</tr>
<tr>
<td><code>show_all</code></td>
<td>显示所有页数。如果开启此参数的话，<code>end_size</code> 和 <code>mid_size</code> 就没用了。</td>
<td>false</td>
</tr>
</tbody>
</table>
<h3 id="search-form"><a href="#search-form" class="headerlink" title="search_form"></a>search_form</h3><p>插入 Google 搜索框。</p>
<pre><code class="js">&lt;%- search_form(options) %&gt;
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>class</code></td>
<td>表单的 class name</td>
<td>search-form</td>
</tr>
<tr>
<td><code>text</code></td>
<td>搜索提示文字</td>
<td>Search</td>
</tr>
<tr>
<td><code>button</code></td>
<td>显示搜索按钮。此参数可为布尔值（boolean）或字符串，当设定是字符串的时候，即为搜索按钮的文字。</td>
<td>false</td>
</tr>
</tbody>
</table>
<h3 id="number-format"><a href="#number-format" class="headerlink" title="number_format"></a>number_format</h3><p>格式化数字。</p>
<pre><code class="js">&lt;%- number_format(number, [options]) %&gt;
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>precision</code></td>
<td>数字精度。此选项可为 <code>false</code> 或非负整数。</td>
<td>false</td>
</tr>
<tr>
<td><code>delimiter</code></td>
<td>千位数分隔符号</td>
<td>,</td>
</tr>
<tr>
<td><code>separator</code></td>
<td>整数和小数之间的分隔符号</td>
<td>.</td>
</tr>
</tbody>
</table>
<p><strong>示例：</strong></p>
<pre><code class="js">&lt;%- number_format(12345.67, {precision: 1}) %&gt;
// 12,345.68

&lt;%- number_format(12345.67, {precision: 4}) %&gt;
// 12,345.6700

&lt;%- number_format(12345.67, {precision: 0}) %&gt;
// 12,345

&lt;%- number_format(12345.67, {delimiter: &#39;&#39;}) %&gt;
// 12345.67

&lt;%- number_format(12345.67, {separator: &#39;/&#39;}) %&gt;
// 12,345/67
</code></pre>
<h3 id="open-graph"><a href="#open-graph" class="headerlink" title="open_graph"></a>open_graph</h3><p>插入 open graph 资源。</p>
<pre><code class="js">&lt;%- open_graph([options]) %&gt;
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>title</code></td>
<td>页面标题 (<code>og:title</code>)</td>
<td><code>page.title</code></td>
</tr>
<tr>
<td><code>type</code></td>
<td>页面类型 (<code>og:type</code>)</td>
<td>blog</td>
</tr>
<tr>
<td><code>url</code></td>
<td>页面网址 (<code>og:url</code>)</td>
<td><code>url</code></td>
</tr>
<tr>
<td><code>image</code></td>
<td>页面图片 (<code>og:image</code>)</td>
<td>内容中的图片</td>
</tr>
<tr>
<td><code>site_name</code></td>
<td>网站名称 (<code>og:site_name</code>)</td>
<td><code>config.title</code></td>
</tr>
<tr>
<td><code>description</code></td>
<td>页面描述 (<code>og:desription</code>)</td>
<td>内容摘要或前 200 字</td>
</tr>
<tr>
<td><code>twitter_card</code></td>
<td>Twitter 卡片类型 (<code>twitter:card</code>)</td>
<td>summary</td>
</tr>
<tr>
<td><code>twitter_id</code></td>
<td>Twitter ID (<code>twitter:creator</code>)</td>
<td></td>
</tr>
<tr>
<td><code>twitter_site</code></td>
<td>Twitter 网站 (<code>twitter:site</code>)</td>
<td></td>
</tr>
<tr>
<td><code>google_plus</code></td>
<td>Google+ 个人资料链接</td>
<td></td>
</tr>
<tr>
<td><code>fb_admins</code></td>
<td>Facebook 管理者 ID</td>
<td></td>
</tr>
<tr>
<td><code>fb_app_id</code></td>
<td>Facebook 应用程序 ID</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="toc"><a href="#toc" class="headerlink" title="toc"></a>toc</h3><p>解析内容中的标题标签 (h1~h6) 并插入目录。</p>
<pre><code class="js">&lt;%- toc(str, [options]) %&gt;
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>class</code></td>
<td>Class 名称</td>
<td>toc</td>
</tr>
<tr>
<td><code>list_number</code></td>
<td>显示编号</td>
<td>true</td>
</tr>
</tbody>
</table>
<p><strong>示例：</strong></p>
<pre><code class="js">&lt;%- toc(page.content) %&gt;
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;辅助函数帮助您在模版中快速插入内容。辅助函数不能在源文件中使用。&lt;/p&gt;
&lt;h2 id=&quot;网址&quot;&gt;&lt;a href=&quot;#网址&quot; class=&quot;headerlink&quot; title=&quot;网址&quot;&gt;&lt;/a&gt;网址&lt;/h2&gt;&lt;h3 id=&quot;url-for&quot;&gt;&lt;a href=&quot;#url-fo
    
    </summary>
    
      <category term="hexo指南" scheme="http://s.amlove.cn/categories/hexo%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="hexo" scheme="http://s.amlove.cn/tags/hexo/"/>
    
      <category term="hexo指南" scheme="http://s.amlove.cn/tags/hexo%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
</feed>
